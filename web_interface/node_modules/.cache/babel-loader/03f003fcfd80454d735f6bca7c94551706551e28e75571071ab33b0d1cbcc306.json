{"ast":null,"code":"var _jsxFileName = \"/Users/cooperstevens/Documents/CursorWorkspace copy/Spinecat/web_interface/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Toaster } from 'react-hot-toast';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Settings } from 'lucide-react';\nimport { apiService } from './services/api';\nimport ImageUploader from './components/ImageUploader';\nimport SpineVisualizer from './components/SpineVisualizer';\nimport BookListManager from './components/BookListManager';\nimport ProcessingStatus from './components/ProcessingStatus';\nimport FinalizePanel from './components/FinalizePanel';\nimport ManualBookSearch from './components/ManualBookSearch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [processingState, setProcessingState] = useState({\n    status: 'idle',\n    progress: 0,\n    message: 'Ready to process images'\n  });\n  const [processingResult, setProcessingResult] = useState(null);\n  const [selectedSpineId, setSelectedSpineId] = useState(null);\n  const [isFinalized, setIsFinalized] = useState(false);\n\n  // Function to scroll to book when spine is clicked\n  const handleSpineSelected = useCallback(spineId => {\n    console.log('🎯 Spine clicked:', spineId);\n    setSelectedSpineId(spineId);\n\n    // Find the corresponding book and scroll to it\n    if (processingResult) {\n      const book = processingResult.book_matches.find(b => b.spine_region_id === spineId);\n      console.log('🔍 Found book for spine:', book);\n      if (book) {\n        // Small delay to ensure DOM is updated\n        setTimeout(() => {\n          const bookElement = document.querySelector(`[data-book-id=\"${book.id}\"]`);\n          console.log('🔍 Looking for book element:', book.id, bookElement);\n          if (bookElement) {\n            console.log('✅ Scrolling to book:', book.title);\n            bookElement.scrollIntoView({\n              behavior: 'smooth',\n              block: 'center',\n              inline: 'nearest'\n            });\n\n            // Add highlight effect\n            bookElement.classList.add('ring-2', 'ring-blue-400', 'ring-opacity-75');\n            setTimeout(() => {\n              bookElement.classList.remove('ring-2', 'ring-blue-400', 'ring-opacity-75');\n            }, 2000);\n          } else {\n            console.warn('❌ Book element not found for ID:', book.id);\n          }\n        }, 100);\n      } else {\n        console.warn('❌ No book found for spine ID:', spineId);\n      }\n    }\n  }, [processingResult]);\n  const [currentTaskId, setCurrentTaskId] = useState(null);\n  const [isManualSearchOpen, setIsManualSearchOpen] = useState(false);\n  const [editingBookId, setEditingBookId] = useState(null);\n\n  // Progress polling for current task\n  useEffect(() => {\n    let intervalId;\n    if (processingState.status === 'processing' && currentTaskId) {\n      console.log('🔄 App: Starting progress polling for task:', currentTaskId);\n      intervalId = setInterval(async () => {\n        try {\n          const data = await apiService.getProgress(currentTaskId);\n          console.log('📡 App: Polled progress:', data);\n          setProcessingState(prev => ({\n            ...prev,\n            status: data.status === 'completed' ? 'completed' : 'processing',\n            progress: data.progress,\n            message: data.message\n          }));\n\n          // If task is completed, fetch the result\n          if (data.status === 'completed') {\n            try {\n              var _result$book_matches, _result$spine_regions, _result$ocr_failures;\n              const result = await apiService.getResult(currentTaskId);\n              console.log('✅ App: Got result:', result);\n              console.log('🔍 App: Result structure:', {\n                total_spines: result.total_spines,\n                successful_matches: result.successful_matches,\n                book_matches_length: (_result$book_matches = result.book_matches) === null || _result$book_matches === void 0 ? void 0 : _result$book_matches.length,\n                spine_regions_length: (_result$spine_regions = result.spine_regions) === null || _result$spine_regions === void 0 ? void 0 : _result$spine_regions.length,\n                ocr_failures_length: (_result$ocr_failures = result.ocr_failures) === null || _result$ocr_failures === void 0 ? void 0 : _result$ocr_failures.length\n              });\n              if (result.book_matches && result.book_matches.length > 0) {\n                console.log('🔍 App: First book match:', result.book_matches[0]);\n              }\n              setProcessingResult(result);\n              setProcessingState(prev => ({\n                ...prev,\n                status: 'completed',\n                progress: 100,\n                message: `Processed ${result.total_spines} spines with ${result.successful_matches} successful matches`\n              }));\n            } catch (error) {\n              console.error('❌ App: Failed to get result:', error);\n              setProcessingState(prev => ({\n                ...prev,\n                status: 'error',\n                message: 'Failed to get processing result'\n              }));\n            }\n          }\n        } catch (error) {\n          console.error('❌ App: Failed to poll progress:', error);\n        }\n      }, 200); // Poll every 200ms\n    }\n    return () => {\n      if (intervalId) {\n        console.log('🔄 App: Stopping progress polling...');\n        clearInterval(intervalId);\n      }\n    };\n  }, [processingState.status, currentTaskId]);\n  const handleImageUpload = useCallback(async file => {\n    try {\n      setProcessingState({\n        status: 'processing',\n        progress: 0,\n        message: 'Starting image processing...'\n      });\n\n      // Start the processing task\n      const {\n        task_id\n      } = await apiService.startProcess(file);\n      setCurrentTaskId(task_id);\n      console.log('🚀 App: Started task:', task_id);\n    } catch (error) {\n      console.error('❌ App: Failed to start processing:', error);\n      setProcessingState({\n        status: 'error',\n        progress: 0,\n        message: `Failed to start processing: ${error instanceof Error ? error.message : 'Unknown error'}`\n      });\n    }\n  }, []);\n  const handleReset = useCallback(() => {\n    setProcessingState({\n      status: 'idle',\n      progress: 0,\n      message: 'Ready to process images'\n    });\n    setProcessingResult(null);\n    setSelectedSpineId(null);\n    setIsFinalized(false);\n    setCurrentTaskId(null);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white\",\n    children: [/*#__PURE__*/_jsxDEV(Toaster, {\n      position: \"top-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"bg-slate-800/50 backdrop-blur-sm border-b border-slate-700/50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center h-16\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-xl font-semibold text-slate-200\",\n            children: \"Book Spine Analyzer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-4\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => window.open('http://127.0.0.1:8002/docs', '_blank'),\n              className: \"flex items-center space-x-2 px-3 py-2 text-sm text-slate-300 hover:text-white hover:bg-slate-700/50 rounded-md transition-colors\",\n              children: [/*#__PURE__*/_jsxDEV(Settings, {\n                className: \"w-4 h-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"API Docs\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\",\n      children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n        mode: \"wait\",\n        children: [processingState.status === 'idle' && /*#__PURE__*/_jsxDEV(motion.div, {\n          initial: {\n            opacity: 0,\n            y: 20\n          },\n          animate: {\n            opacity: 1,\n            y: 0\n          },\n          exit: {\n            opacity: 0,\n            y: -20\n          },\n          transition: {\n            duration: 0.3\n          },\n          children: /*#__PURE__*/_jsxDEV(ImageUploader, {\n            onImageUpload: handleImageUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this)\n        }, \"upload\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), processingState.status === 'processing' && /*#__PURE__*/_jsxDEV(motion.div, {\n          initial: {\n            opacity: 0,\n            y: 20\n          },\n          animate: {\n            opacity: 1,\n            y: 0\n          },\n          exit: {\n            opacity: 0,\n            y: -20\n          },\n          transition: {\n            duration: 0.3\n          },\n          children: /*#__PURE__*/_jsxDEV(ProcessingStatus, {\n            state: processingState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this)\n        }, \"processing\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this), processingState.status === 'completed' && processingResult && /*#__PURE__*/_jsxDEV(motion.div, {\n          initial: {\n            opacity: 0,\n            y: 20\n          },\n          animate: {\n            opacity: 1,\n            y: 0\n          },\n          exit: {\n            opacity: 0,\n            y: -20\n          },\n          transition: {\n            duration: 0.3\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-y-8\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"text-3xl font-bold text-slate-100 mb-2\",\n                children: \"Analysis Complete!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-slate-400\",\n                children: [\"Found \", processingResult.total_spines, \" spines with \", processingResult.successful_matches, \" successful matches\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleReset,\n                className: \"mt-4 px-6 py-2 bg-slate-700 hover:bg-slate-600 text-white rounded-lg transition-colors\",\n                children: \"Process Another Image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid grid-cols-1 lg:grid-cols-2 gap-8\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"space-y-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"text-xl font-semibold text-slate-200\",\n                  children: \"Detected Spines\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(SpineVisualizer, {\n                  imageUrl: `${apiService.getBaseUrl()}${processingResult.image_url}`,\n                  spineRegions: processingResult.spine_regions,\n                  bookMatches: processingResult.book_matches,\n                  selectedSpineId: selectedSpineId,\n                  onSpineSelected: handleSpineSelected,\n                  isFinalized: isFinalized,\n                  onSpineRegionsUpdated: updatedRegions => {\n                    setProcessingResult(prev => prev ? {\n                      ...prev,\n                      spine_regions: updatedRegions\n                    } : null);\n                  },\n                  onManualSpineAdded: newSpine => {\n                    setProcessingResult(prev => prev ? {\n                      ...prev,\n                      spine_regions: [...prev.spine_regions, newSpine],\n                      // Update the existing book's spine_region_id to point to the new spine\n                      book_matches: prev.book_matches.map(book => book.id === editingBookId ? {\n                        ...book,\n                        spine_region_id: newSpine.id\n                      } : book)\n                    } : null);\n                    // Stop editing mode\n                    setEditingBookId(null);\n                  },\n                  onStopEditing: () => setEditingBookId(null),\n                  editingBookId: editingBookId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"space-y-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"text-xl font-semibold text-slate-200\",\n                  children: \"Identified Books\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 282,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(BookListManager, {\n                  bookMatches: processingResult.book_matches,\n                  ocrFailures: processingResult.ocr_failures,\n                  selectedSpineId: selectedSpineId,\n                  onSpineSelected: handleSpineSelected,\n                  onBookListUpdated: updatedMatches => {\n                    setProcessingResult(prev => prev ? {\n                      ...prev,\n                      book_matches: updatedMatches,\n                      // Filter out spine regions that no longer have corresponding books\n                      spine_regions: prev.spine_regions.filter(spine => updatedMatches.some(book => book.spine_region_id === spine.id))\n                    } : null);\n                  },\n                  onStartEditing: bookId => {\n                    console.log('🔄 Starting edit for book:', bookId);\n                    console.log('🔄 Current editingBookId before set:', editingBookId);\n                    if (editingBookId === bookId) {\n                      console.log('🔄 Book is already in editing mode, toggling off');\n                      setEditingBookId(null);\n                    } else {\n                      console.log('🔄 Setting editingBookId to:', bookId);\n                      setEditingBookId(bookId);\n                    }\n                  },\n                  onStopEditing: () => setEditingBookId(null)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(FinalizePanel, {\n              processingResult: processingResult,\n              onUnfinalize: () => setIsFinalized(false)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this)\n        }, \"results\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), processingState.status === 'error' && /*#__PURE__*/_jsxDEV(motion.div, {\n          initial: {\n            opacity: 0,\n            y: 20\n          },\n          animate: {\n            opacity: 1,\n            y: 0\n          },\n          exit: {\n            opacity: 0,\n            y: -20\n          },\n          transition: {\n            duration: 0.3\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-2xl font-bold text-red-400 mb-4\",\n              children: \"Processing Failed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-slate-300 mb-6\",\n              children: processingState.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleReset,\n              className: \"px-6 py-2 bg-slate-700 hover:bg-slate-600 text-white rounded-lg transition-colors\",\n              children: \"Try Again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }, this)\n        }, \"error\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ManualBookSearch, {\n      isOpen: isManualSearchOpen,\n      onClose: () => setIsManualSearchOpen(false),\n      onBookSelected: book => {\n        console.log('Selected book from manual search:', book);\n        // You can add logic here to handle the selected book\n        // For example, add it to a list or replace a failed match\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"3B7BwNJbTQVHlkccaYnH/CMjydE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Toaster","motion","AnimatePresence","Settings","apiService","ImageUploader","SpineVisualizer","BookListManager","ProcessingStatus","FinalizePanel","ManualBookSearch","jsxDEV","_jsxDEV","App","_s","processingState","setProcessingState","status","progress","message","processingResult","setProcessingResult","selectedSpineId","setSelectedSpineId","isFinalized","setIsFinalized","handleSpineSelected","spineId","console","log","book","book_matches","find","b","spine_region_id","setTimeout","bookElement","document","querySelector","id","title","scrollIntoView","behavior","block","inline","classList","add","remove","warn","currentTaskId","setCurrentTaskId","isManualSearchOpen","setIsManualSearchOpen","editingBookId","setEditingBookId","intervalId","setInterval","data","getProgress","prev","_result$book_matches","_result$spine_regions","_result$ocr_failures","result","getResult","total_spines","successful_matches","book_matches_length","length","spine_regions_length","spine_regions","ocr_failures_length","ocr_failures","error","clearInterval","handleImageUpload","file","task_id","startProcess","Error","handleReset","className","children","position","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","open","mode","div","initial","opacity","y","animate","exit","transition","duration","onImageUpload","state","imageUrl","getBaseUrl","image_url","spineRegions","bookMatches","onSpineSelected","onSpineRegionsUpdated","updatedRegions","onManualSpineAdded","newSpine","map","onStopEditing","ocrFailures","onBookListUpdated","updatedMatches","filter","spine","some","onStartEditing","bookId","onUnfinalize","isOpen","onClose","onBookSelected","_c","$RefreshReg$"],"sources":["/Users/cooperstevens/Documents/CursorWorkspace copy/Spinecat/web_interface/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Toaster } from 'react-hot-toast';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Settings } from 'lucide-react';\n\nimport { ProcessingState, ProcessingResult } from './types';\nimport { apiService } from './services/api';\nimport ImageUploader from './components/ImageUploader';\nimport SpineVisualizer from './components/SpineVisualizer';\nimport BookListManager from './components/BookListManager';\nimport ProcessingStatus from './components/ProcessingStatus';\nimport FinalizePanel from './components/FinalizePanel';\nimport ManualBookSearch from './components/ManualBookSearch';\n\nconst App: React.FC = () => {\n  const [processingState, setProcessingState] = useState<ProcessingState>({\n    status: 'idle',\n    progress: 0,\n    message: 'Ready to process images'\n  });\n  \n  const [processingResult, setProcessingResult] = useState<ProcessingResult | null>(null);\n  const [selectedSpineId, setSelectedSpineId] = useState<string | null>(null);\n  const [isFinalized, setIsFinalized] = useState(false);\n  \n  // Function to scroll to book when spine is clicked\n  const handleSpineSelected = useCallback((spineId: string) => {\n    console.log('🎯 Spine clicked:', spineId);\n    setSelectedSpineId(spineId);\n    \n    // Find the corresponding book and scroll to it\n    if (processingResult) {\n      const book = processingResult.book_matches.find(b => b.spine_region_id === spineId);\n      console.log('🔍 Found book for spine:', book);\n      if (book) {\n        // Small delay to ensure DOM is updated\n        setTimeout(() => {\n          const bookElement = document.querySelector(`[data-book-id=\"${book.id}\"]`);\n          console.log('🔍 Looking for book element:', book.id, bookElement);\n          if (bookElement) {\n            console.log('✅ Scrolling to book:', book.title);\n            bookElement.scrollIntoView({ \n              behavior: 'smooth', \n              block: 'center',\n              inline: 'nearest'\n            });\n            \n            // Add highlight effect\n            bookElement.classList.add('ring-2', 'ring-blue-400', 'ring-opacity-75');\n            setTimeout(() => {\n              bookElement.classList.remove('ring-2', 'ring-blue-400', 'ring-opacity-75');\n            }, 2000);\n          } else {\n            console.warn('❌ Book element not found for ID:', book.id);\n          }\n        }, 100);\n      } else {\n        console.warn('❌ No book found for spine ID:', spineId);\n      }\n    }\n  }, [processingResult]);\n  const [currentTaskId, setCurrentTaskId] = useState<string | null>(null);\n  const [isManualSearchOpen, setIsManualSearchOpen] = useState(false);\n  const [editingBookId, setEditingBookId] = useState<string | null>(null);\n  \n  // Progress polling for current task\n  useEffect(() => {\n    let intervalId: NodeJS.Timeout;\n    \n    if (processingState.status === 'processing' && currentTaskId) {\n      console.log('🔄 App: Starting progress polling for task:', currentTaskId);\n      intervalId = setInterval(async () => {\n        try {\n          const data = await apiService.getProgress(currentTaskId);\n          console.log('📡 App: Polled progress:', data);\n          \n          setProcessingState(prev => ({\n            ...prev,\n            status: data.status === 'completed' ? 'completed' : 'processing',\n            progress: data.progress,\n            message: data.message\n          }));\n          \n          // If task is completed, fetch the result\n          if (data.status === 'completed') {\n            try {\n              const result = await apiService.getResult(currentTaskId);\n              console.log('✅ App: Got result:', result);\n              console.log('🔍 App: Result structure:', {\n                total_spines: result.total_spines,\n                successful_matches: result.successful_matches,\n                book_matches_length: result.book_matches?.length,\n                spine_regions_length: result.spine_regions?.length,\n                ocr_failures_length: result.ocr_failures?.length\n              });\n              if (result.book_matches && result.book_matches.length > 0) {\n                console.log('🔍 App: First book match:', result.book_matches[0]);\n              }\n              setProcessingResult(result);\n              setProcessingState(prev => ({\n                ...prev,\n                status: 'completed',\n                progress: 100,\n                message: `Processed ${result.total_spines} spines with ${result.successful_matches} successful matches`\n              }));\n            } catch (error) {\n              console.error('❌ App: Failed to get result:', error);\n              setProcessingState(prev => ({\n                ...prev,\n                status: 'error',\n                message: 'Failed to get processing result'\n              }));\n            }\n          }\n          \n        } catch (error) {\n          console.error('❌ App: Failed to poll progress:', error);\n        }\n      }, 200); // Poll every 200ms\n    }\n\n    return () => {\n      if (intervalId) {\n        console.log('🔄 App: Stopping progress polling...');\n        clearInterval(intervalId);\n      }\n    };\n  }, [processingState.status, currentTaskId]);\n\n\n\n  const handleImageUpload = useCallback(async (file: File) => {\n    try {\n      setProcessingState({\n        status: 'processing',\n        progress: 0,\n        message: 'Starting image processing...'\n      });\n\n      // Start the processing task\n      const { task_id } = await apiService.startProcess(file);\n      setCurrentTaskId(task_id);\n      console.log('🚀 App: Started task:', task_id);\n\n    } catch (error) {\n      console.error('❌ App: Failed to start processing:', error);\n      setProcessingState({\n        status: 'error',\n        progress: 0,\n        message: `Failed to start processing: ${error instanceof Error ? error.message : 'Unknown error'}`\n      });\n    }\n  }, []);\n\n  const handleReset = useCallback(() => {\n    setProcessingState({\n      status: 'idle',\n      progress: 0,\n      message: 'Ready to process images'\n    });\n    setProcessingResult(null);\n    setSelectedSpineId(null);\n    setIsFinalized(false);\n    setCurrentTaskId(null);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white\">\n      <Toaster position=\"top-right\" />\n      \n      {/* Header */}\n      <header className=\"bg-slate-800/50 backdrop-blur-sm border-b border-slate-700/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <h1 className=\"text-xl font-semibold text-slate-200\">\n              Book Spine Analyzer\n            </h1>\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={() => window.open('http://127.0.0.1:8002/docs', '_blank')}\n                className=\"flex items-center space-x-2 px-3 py-2 text-sm text-slate-300 hover:text-white hover:bg-slate-700/50 rounded-md transition-colors\"\n              >\n                <Settings className=\"w-4 h-4\" />\n                <span>API Docs</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <AnimatePresence mode=\"wait\">\n          {processingState.status === 'idle' && (\n            <motion.div\n              key=\"upload\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.3 }}\n            >\n              <ImageUploader onImageUpload={handleImageUpload} />\n            </motion.div>\n          )}\n\n          {processingState.status === 'processing' && (\n            <motion.div\n              key=\"processing\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.3 }}\n            >\n              <ProcessingStatus state={processingState} />\n            </motion.div>\n          )}\n\n          {processingState.status === 'completed' && processingResult && (\n            <motion.div\n              key=\"results\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.3 }}\n            >\n              <div className=\"space-y-8\">\n                {/* Results Header */}\n                <div className=\"text-center\">\n                  <h2 className=\"text-3xl font-bold text-slate-100 mb-2\">\n                    Analysis Complete!\n                  </h2>\n                  <p className=\"text-slate-400\">\n                    Found {processingResult.total_spines} spines with {processingResult.successful_matches} successful matches\n                  </p>\n                  <button\n                    onClick={handleReset}\n                    className=\"mt-4 px-6 py-2 bg-slate-700 hover:bg-slate-600 text-white rounded-lg transition-colors\"\n                  >\n                    Process Another Image\n                  </button>\n                </div>\n\n                {/* Main Results Grid */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                  {/* Image with Spine Overlays */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-xl font-semibold text-slate-200\">Detected Spines</h3>\n                    <SpineVisualizer\n                      imageUrl={`${apiService.getBaseUrl()}${processingResult.image_url}`}\n                      spineRegions={processingResult.spine_regions}\n                      bookMatches={processingResult.book_matches}\n                      selectedSpineId={selectedSpineId}\n                      onSpineSelected={handleSpineSelected}\n                      isFinalized={isFinalized}\n                      onSpineRegionsUpdated={(updatedRegions) => {\n                        setProcessingResult(prev => prev ? {\n                          ...prev,\n                          spine_regions: updatedRegions\n                        } : null);\n                      }}\n                      onManualSpineAdded={(newSpine) => {\n                        setProcessingResult(prev => prev ? {\n                          ...prev,\n                          spine_regions: [...prev.spine_regions, newSpine],\n                          // Update the existing book's spine_region_id to point to the new spine\n                          book_matches: prev.book_matches.map(book => \n                            book.id === editingBookId \n                              ? { ...book, spine_region_id: newSpine.id }\n                              : book\n                          )\n                        } : null);\n                        // Stop editing mode\n                        setEditingBookId(null);\n                      }}\n                      onStopEditing={() => setEditingBookId(null)}\n                      editingBookId={editingBookId}\n                    />\n                  </div>\n\n                  {/* Book Matches and Management */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-xl font-semibold text-slate-200\">Identified Books</h3>\n                    <BookListManager\n                      bookMatches={processingResult.book_matches}\n                      ocrFailures={processingResult.ocr_failures}\n                      selectedSpineId={selectedSpineId}\n                      onSpineSelected={handleSpineSelected}\n                      onBookListUpdated={(updatedMatches) => {\n                        setProcessingResult(prev => prev ? {\n                          ...prev,\n                          book_matches: updatedMatches,\n                          // Filter out spine regions that no longer have corresponding books\n                          spine_regions: prev.spine_regions.filter(spine => \n                            updatedMatches.some(book => book.spine_region_id === spine.id)\n                          )\n                        } : null);\n                      }}\n                      onStartEditing={(bookId) => {\n                        console.log('🔄 Starting edit for book:', bookId);\n                        console.log('🔄 Current editingBookId before set:', editingBookId);\n                        if (editingBookId === bookId) {\n                          console.log('🔄 Book is already in editing mode, toggling off');\n                          setEditingBookId(null);\n                        } else {\n                          console.log('🔄 Setting editingBookId to:', bookId);\n                          setEditingBookId(bookId);\n                        }\n                      }}\n                      onStopEditing={() => setEditingBookId(null)}\n                    />\n                  </div>\n                </div>\n\n                {/* Finalize Panel */}\n                <FinalizePanel\n                  processingResult={processingResult}\n                  onUnfinalize={() => setIsFinalized(false)}\n                />\n              </div>\n            </motion.div>\n          )}\n\n          {processingState.status === 'error' && (\n            <motion.div\n              key=\"error\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.3 }}\n            >\n              <div className=\"text-center\">\n                <h2 className=\"text-2xl font-bold text-red-400 mb-4\">\n                  Processing Failed\n                </h2>\n                <p className=\"text-slate-300 mb-6\">\n                  {processingState.message}\n                </p>\n                <button\n                  onClick={handleReset}\n                  className=\"px-6 py-2 bg-slate-700 hover:bg-slate-600 text-white rounded-lg transition-colors\"\n                >\n                  Try Again\n                </button>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </main>\n\n      {/* Manual Book Search Modal */}\n      <ManualBookSearch\n        isOpen={isManualSearchOpen}\n        onClose={() => setIsManualSearchOpen(false)}\n        onBookSelected={(book) => {\n          console.log('Selected book from manual search:', book);\n          // You can add logic here to handle the selected book\n          // For example, add it to a list or replace a failed match\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}