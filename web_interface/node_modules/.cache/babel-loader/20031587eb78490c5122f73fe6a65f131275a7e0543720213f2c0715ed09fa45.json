{"ast":null,"code":"var _jsxFileName = \"/Users/cooperstevens/Documents/CursorWorkspace copy/Spinecat/web_interface/src/components/SpineVisualizer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { BookOpen, AlertCircle, Plus, Save, X, Move } from 'lucide-react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SpineVisualizer = ({\n  imageUrl,\n  spineRegions,\n  bookMatches,\n  selectedSpineId,\n  onSpineSelected,\n  isFinalized,\n  onSpineRegionsUpdated,\n  onManualSpineAdded,\n  onStopEditing,\n  editingBookId\n}) => {\n  _s();\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [hoveredSpineId, setHoveredSpineId] = useState(null);\n  const [imageScale, setImageScale] = useState({\n    scaleX: 1,\n    scaleY: 1,\n    offsetX: 0,\n    offsetY: 0\n  });\n  const [overlayRect, setOverlayRect] = useState(null);\n  const [editingState, setEditingState] = useState({\n    mode: 'none',\n    spineId: null,\n    vertexIndex: null,\n    isDragging: false\n  });\n  const [drawingPoints, setDrawingPoints] = useState([]);\n  const [localSpineRegions, setLocalSpineRegions] = useState(spineRegions);\n  const imageRef = useRef(null);\n  const containerRef = useRef(null);\n  const svgRef = useRef(null);\n\n  // Debug logging for editingBookId\n  console.log('🔍 SpineVisualizer render - editingBookId:', editingBookId);\n  console.log('🔍 SpineVisualizer render - editingState:', editingState);\n  console.log('🔍 SpineVisualizer render - spineRegions count:', spineRegions.length);\n  console.log('🔍 SpineVisualizer render - bookMatches count:', bookMatches.length);\n\n  // Auto-enter editing mode when editingBookId changes\n  useEffect(() => {\n    console.log('🔄 useEffect triggered - editingBookId changed to:', editingBookId);\n    if (editingBookId) {\n      console.log('🔄 Auto-entering editing mode for book:', editingBookId);\n      // Find the spine region for this book\n      const book = bookMatches.find(b => b.id === editingBookId);\n      console.log('🔍 Found book:', book === null || book === void 0 ? void 0 : book.title, 'spine_region_id:', book === null || book === void 0 ? void 0 : book.spine_region_id);\n      if (book && book.spine_region_id) {\n        const spine = spineRegions.find(s => s.id === book.spine_region_id);\n        console.log('🔍 Found spine:', spine === null || spine === void 0 ? void 0 : spine.id);\n        if (spine) {\n          console.log('✅ Found spine, entering editing mode');\n          setEditingState({\n            mode: 'editing',\n            spineId: spine.id,\n            vertexIndex: null,\n            isDragging: false\n          });\n        } else {\n          console.log('❌ No spine found for book, entering drawing mode');\n          setEditingState({\n            mode: 'drawing',\n            spineId: editingBookId,\n            vertexIndex: null,\n            isDragging: false\n          });\n        }\n      } else {\n        console.log('❌ No book or spine_region_id found, entering drawing mode');\n        setEditingState({\n          mode: 'drawing',\n          spineId: editingBookId,\n          vertexIndex: null,\n          isDragging: false\n        });\n      }\n    } else {\n      console.log('🔄 Exiting editing mode');\n      setEditingState({\n        mode: 'none',\n        spineId: null,\n        vertexIndex: null,\n        isDragging: false\n      });\n    }\n  }, [editingBookId, bookMatches, spineRegions]);\n\n  // Sync local spine regions when prop changes\n  useEffect(() => {\n    setLocalSpineRegions(spineRegions);\n  }, [spineRegions]);\n\n  // Calculate image scale and offset when image loads\n  useEffect(() => {\n    if (imageRef.current && imageLoaded) {\n      const img = imageRef.current;\n      const container = containerRef.current;\n      if (container) {\n        const containerRect = container.getBoundingClientRect();\n        const imgRect = img.getBoundingClientRect();\n\n        // Calculate scale factors\n        const scaleX = imgRect.width / img.naturalWidth;\n        const scaleY = imgRect.height / img.naturalHeight;\n\n        // Calculate offset (difference between container and image positioning)\n        const offsetX = imgRect.left - containerRect.left;\n        const offsetY = imgRect.top - containerRect.top;\n        setImageScale({\n          scaleX,\n          scaleY,\n          offsetX,\n          offsetY\n        });\n        setOverlayRect({\n          left: offsetX,\n          top: offsetY,\n          width: imgRect.width,\n          height: imgRect.height\n        });\n      }\n    }\n  }, [imageLoaded]);\n\n  // Convert spine polygon to scaled SVG points string\n  const getScaledPoints = spine => {\n    if (!spine.coordinates || spine.coordinates.length === 0) return '';\n    return spine.coordinates.map(([x, y]) => {\n      const sx = x * imageScale.scaleX;\n      const sy = y * imageScale.scaleY;\n      return `${sx},${sy}`;\n    }).join(' ');\n  };\n\n  // Convert SVG coordinates back to image coordinates\n  const getImageCoordinates = (svgX, svgY) => {\n    return [svgX / imageScale.scaleX, svgY / imageScale.scaleY];\n  };\n\n  // Compute centroid for label/tooltip positioning within overlay\n  const getCentroid = spine => {\n    if (!spine.coordinates || spine.coordinates.length === 0) return {\n      x: 0,\n      y: 0\n    };\n    const pts = spine.coordinates;\n    const cx = pts.reduce((a, p) => a + p[0], 0) / pts.length;\n    const cy = pts.reduce((a, p) => a + p[1], 0) / pts.length;\n    return {\n      x: cx * imageScale.scaleX,\n      y: cy * imageScale.scaleY\n    };\n  };\n\n  // Helper function to get book data for a spine\n  const getBookData = spineId => {\n    const book = bookMatches.find(book => book.spine_region_id === spineId);\n    console.log('🔍 getBookData for spine:', spineId, 'found book:', book === null || book === void 0 ? void 0 : book.id, 'title:', book === null || book === void 0 ? void 0 : book.title);\n    return book;\n  };\n\n  // Handle spine region click\n  const handleSpineClick = spineId => {\n    if (editingState.mode === 'drawing') return; // Don't select while drawing\n    onSpineSelected(spineId);\n  };\n\n  // Handle spine region hover\n  const handleSpineHover = spineId => {\n    if (editingState.mode === 'drawing') return; // Don't hover while drawing\n    setHoveredSpineId(spineId);\n  };\n\n  // Start editing mode for a spine\n  const startEditing = spineId => {\n    setEditingState({\n      mode: 'editing',\n      spineId,\n      vertexIndex: null,\n      isDragging: false\n    });\n  };\n\n  // Start drawing mode for manual entry\n  const startDrawing = spineId => {\n    console.log('🎨 Starting drawing mode for spine:', spineId);\n    setEditingState({\n      mode: 'drawing',\n      spineId,\n      vertexIndex: null,\n      isDragging: false\n    });\n    setDrawingPoints([]);\n\n    // If we're editing an existing book, remove the old spine first\n    if (editingBookId && onSpineRegionsUpdated) {\n      const book = bookMatches.find(b => b.id === editingBookId);\n      if (book && book.spine_region_id) {\n        console.log('🗑️ Removing old spine:', book.spine_region_id);\n        const updatedRegions = localSpineRegions.filter(spine => spine.id !== book.spine_region_id);\n        setLocalSpineRegions(updatedRegions);\n        onSpineRegionsUpdated(updatedRegions);\n      }\n    }\n  };\n\n  // Cancel editing/drawing mode\n  const cancelEditing = () => {\n    setEditingState({\n      mode: 'none',\n      spineId: null,\n      vertexIndex: null,\n      isDragging: false\n    });\n    setDrawingPoints([]);\n  };\n\n  // Save manual drawing\n  const saveManualDrawing = () => {\n    if (drawingPoints.length >= 3 && onManualSpineAdded && editingBookId) {\n      const newSpine = {\n        id: `manual_${Date.now()}`,\n        x: Math.min(...drawingPoints.map(p => p[0])),\n        y: Math.min(...drawingPoints.map(p => p[1])),\n        width: Math.max(...drawingPoints.map(p => p[0])) - Math.min(...drawingPoints.map(p => p[0])),\n        height: Math.max(...drawingPoints.map(p => p[1])) - Math.min(...drawingPoints.map(p => p[1])),\n        rotation: 0,\n        confidence: 0.9,\n        coordinates: drawingPoints\n      };\n      onManualSpineAdded(newSpine);\n      cancelEditing();\n    }\n  };\n\n  // Handle SVG click for drawing\n  const handleSvgClick = event => {\n    if (editingState.mode !== 'drawing') return;\n    const svg = svgRef.current;\n    if (!svg) return;\n    const rect = svg.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    const imageCoords = getImageCoordinates(x, y);\n    setDrawingPoints(prev => [...prev, imageCoords]);\n  };\n\n  // Handle vertex drag start\n  const handleVertexDragStart = (spineId, vertexIndex) => {\n    setEditingState(prev => ({\n      ...prev,\n      mode: 'editing',\n      spineId,\n      vertexIndex,\n      isDragging: true\n    }));\n  };\n\n  // Handle vertex drag - use local state for smooth dragging\n  const handleVertexDrag = useCallback((spineId, vertexIndex, newX, newY) => {\n    // Don't call onSpineRegionsUpdated during dragging - just update local state\n    // This prevents re-renders and makes dragging smooth\n    const imageCoords = getImageCoordinates(newX, newY);\n\n    // Update the local spineRegions state for immediate visual feedback\n    setLocalSpineRegions(prev => prev.map(spine => {\n      if (spine.id === spineId && spine.coordinates) {\n        const newCoordinates = [...spine.coordinates];\n        newCoordinates[vertexIndex] = imageCoords;\n        return {\n          ...spine,\n          coordinates: newCoordinates\n        };\n      }\n      return spine;\n    }));\n  }, [imageScale]);\n\n  // Handle mouse move for vertex dragging\n  const handleMouseMove = useCallback(event => {\n    if (editingState.mode !== 'editing' || !editingState.isDragging || !editingState.spineId || editingState.vertexIndex === null) return;\n    const svg = svgRef.current;\n    if (!svg) return;\n    const rect = svg.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    handleVertexDrag(editingState.spineId, editingState.vertexIndex, x, y);\n  }, [editingState, handleVertexDrag]);\n\n  // Handle vertex drag end\n  const handleVertexDragEnd = () => {\n    setEditingState(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n\n    // Sync the local changes back to the parent component\n    if (onSpineRegionsUpdated) {\n      onSpineRegionsUpdated(localSpineRegions);\n    }\n  };\n\n  // Render vertex handles for editing\n  const renderVertexHandles = spine => {\n    var _spine$coordinates;\n    if (editingState.mode !== 'editing' || editingState.spineId !== spine.id) return null;\n    return (_spine$coordinates = spine.coordinates) === null || _spine$coordinates === void 0 ? void 0 : _spine$coordinates.map((coord, index) => {\n      const [x, y] = coord;\n      const svgX = x * imageScale.scaleX;\n      const svgY = y * imageScale.scaleY;\n      return /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: svgX,\n        cy: svgY,\n        r: 6,\n        fill: \"#FF6B6B\",\n        stroke: \"#FF4757\",\n        strokeWidth: 2,\n        cursor: \"move\",\n        onMouseDown: e => {\n          e.stopPropagation();\n          handleVertexDragStart(spine.id, index);\n        },\n        onMouseUp: handleVertexDragEnd,\n        style: {\n          pointerEvents: editingState.isDragging ? 'none' : 'auto'\n        }\n      }, `vertex-${spine.id}-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // Render drawing points\n  const renderDrawingPoints = () => {\n    if (editingState.mode !== 'drawing' || drawingPoints.length === 0) return null;\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [drawingPoints.length > 1 && /*#__PURE__*/_jsxDEV(\"polyline\", {\n        points: drawingPoints.map(([x, y]) => `${x * imageScale.scaleX},${y * imageScale.scaleY}`).join(' '),\n        fill: \"none\",\n        stroke: \"#FF6B6B\",\n        strokeWidth: 2,\n        strokeDasharray: \"5,5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 11\n      }, this), drawingPoints.map(([x, y], index) => /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: x * imageScale.scaleX,\n        cy: y * imageScale.scaleY,\n        r: 4,\n        fill: \"#FF6B6B\",\n        stroke: \"#FF4757\",\n        strokeWidth: 2\n      }, `drawing-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render spine region as polygon within an SVG aligned to the image\n  const renderSpineRegion = spine => {\n    const book = getBookData(spine.id);\n    const points = getScaledPoints(spine);\n    const {\n      x: cx,\n      y: cy\n    } = getCentroid(spine);\n    const isSelected = selectedSpineId === spine.id;\n    const isHovered = hoveredSpineId === spine.id;\n    const isEditing = editingState.mode === 'editing' && editingState.spineId === spine.id;\n    const isDrawing = editingState.mode === 'drawing' && editingState.spineId === spine.id;\n    const hasSelection = selectedSpineId !== null;\n    const isOtherSelected = hasSelection && !isSelected;\n\n    // Debug logging\n    console.log('🔍 Rendering spine:', spine.id, 'editingBookId:', editingBookId, 'book?.spine_region_id:', book === null || book === void 0 ? void 0 : book.spine_region_id);\n\n    // Only show spines that are being edited or not in editing mode\n    if (editingBookId && !isEditing && !isDrawing) {\n      // Check if this spine belongs to the book being edited\n      const isTargetBook = book && book.id === editingBookId;\n      if (!isTargetBook) {\n        console.log('🚫 Hiding spine:', spine.id, 'because it\\'s not the editing target book');\n        return null;\n      }\n    }\n    const fill = isEditing || isDrawing ? 'rgba(255,107,107,0.3)' : isSelected ? 'rgba(59,130,246,0.25)' : isHovered ? 'rgba(59,130,246,0.18)' : 'rgba(59,130,246,0.12)';\n    const stroke = isEditing || isDrawing ? '#FF6B6B' : isSelected ? '#60A5FA' : isHovered ? '#3B82F6' : '#2563EB';\n    const opacity = isOtherSelected && !isEditing && !isDrawing ? 0.35 : 1;\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      style: {\n        opacity\n      },\n      onMouseEnter: () => handleSpineHover(spine.id),\n      onMouseLeave: () => handleSpineHover(null),\n      onClick: () => handleSpineClick(spine.id),\n      children: [/*#__PURE__*/_jsxDEV(\"polygon\", {\n        points: points,\n        fill: fill,\n        stroke: stroke,\n        strokeWidth: 2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: cx,\n        y: cy,\n        textAnchor: \"middle\",\n        dominantBaseline: \"middle\",\n        fill: \"#6B7280\",\n        fontSize: 12,\n        fontWeight: 600,\n        children: spineRegions.findIndex(s => s.id === spine.id) + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), renderVertexHandles(spine), hoveredSpineId === spine.id && book && overlayRect && !isEditing && /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n        x: Math.min(Math.max(cx + 8, 0), overlayRect.width - 200),\n        y: Math.max(cy - 40, 0),\n        width: 200,\n        height: 80,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-900 text-white text-xs px-3 py-2 rounded-lg shadow-lg\",\n          style: {\n            pointerEvents: 'none'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"font-medium mb-1 truncate\",\n            children: book.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-gray-300 truncate\",\n            children: [\"by \", Array.isArray(book.author_name) ? book.author_name.join(', ') : book.author_name || 'Unknown Author']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 15\n          }, this), book.first_publish_year && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-gray-400\",\n            children: book.first_publish_year\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this)]\n    }, spine.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card p-0 overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-6 border-b border-gray-200\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-semibold text-gray-500 mb-2\",\n            children: \"Book Spine Detection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-400\",\n            children: [spineRegions.length, \" spine\", spineRegions.length !== 1 ? 's' : '', \" detected\", bookMatches.length > 0 && ` • ${bookMatches.length} book${bookMatches.length !== 1 ? 's' : ''} identified`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 11\n        }, this), !isFinalized && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2\",\n          children: [editingState.mode === 'none' && editingBookId && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => startDrawing(editingBookId),\n              className: \"btn-secondary text-sm px-3 py-1 flex items-center space-x-1\",\n              children: [/*#__PURE__*/_jsxDEV(Plus, {\n                className: \"w-4 h-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 22\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Draw OBB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 476,\n                columnNumber: 22\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 20\n            }, this)\n          }, void 0, false), editingState.mode === 'drawing' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: saveManualDrawing,\n              disabled: drawingPoints.length < 3,\n              className: \"btn-primary text-sm px-3 py-1 flex items-center space-x-1 disabled:opacity-50\",\n              children: [/*#__PURE__*/_jsxDEV(Save, {\n                className: \"w-4 h-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Save OBB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 489,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: cancelEditing,\n              className: \"btn-danger text-sm px-3 py-1 flex items-center space-x-1\",\n              children: [/*#__PURE__*/_jsxDEV(X, {\n                className: \"w-4 h-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 496,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), editingState.mode === 'editing' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => startDrawing(editingBookId || ''),\n              className: \"btn-secondary text-sm px-3 py-1 flex items-center space-x-1\",\n              children: [/*#__PURE__*/_jsxDEV(Plus, {\n                className: \"w-4 h-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Draw New OBB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 508,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-400 px-3 py-1 flex items-center space-x-1\",\n              children: [/*#__PURE__*/_jsxDEV(Move, {\n                className: \"w-4 h-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Drag vertices to edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 512,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                cancelEditing();\n                if (onStopEditing) onStopEditing();\n              },\n              className: \"btn-primary text-sm px-3 py-1 flex items-center space-x-1\",\n              children: [/*#__PURE__*/_jsxDEV(Save, {\n                className: \"w-4 h-4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Done\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: \"relative bg-gray-100 min-h-[400px] flex items-center justify-center\",\n      children: [!imageLoaded && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center text-gray-400\",\n        children: [/*#__PURE__*/_jsxDEV(BookOpen, {\n          className: \"w-12 h-12 mx-auto mb-2 text-gray-400\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading image...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        ref: imageRef,\n        src: imageUrl,\n        alt: \"Book spines\",\n        className: \"max-w-full max-h-[600px] object-contain\",\n        onLoad: () => setImageLoaded(true),\n        onError: () => setImageLoaded(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 9\n      }, this), imageLoaded && overlayRect && /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        className: \"absolute cursor-crosshair\",\n        style: {\n          left: overlayRect.left,\n          top: overlayRect.top\n        },\n        width: overlayRect.width,\n        height: overlayRect.height,\n        onClick: handleSvgClick,\n        onMouseMove: handleMouseMove,\n        onMouseUp: handleVertexDragEnd,\n        children: [localSpineRegions.map(renderSpineRegion), renderDrawingPoints()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 11\n      }, this), imageLoaded && spineRegions.length === 0 && editingState.mode !== 'drawing' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 flex items-center justify-center bg-white bg-opacity-90\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center text-gray-400\",\n          children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n            className: \"w-12 h-12 mx-auto mb-2 text-gray-400\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-lg font-medium\",\n            children: \"No book spines detected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm\",\n            children: \"Try uploading a clearer image or draw spines manually\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 11\n      }, this), imageLoaded && editingState.mode === 'drawing' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-4 left-4 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm font-medium\",\n          children: \"Click to add vertices. Need at least 3 points.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs opacity-90\",\n          children: \"Click \\\"Save OBB\\\" when done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 7\n    }, this), spineRegions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 bg-gray-50 border-t border-gray-200\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between text-sm text-gray-400\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-3 h-3 bg-primary-500 rounded\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Detected spine\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-3 h-3 bg-primary-600 rounded ring-2 ring-primary-400\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Selected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 15\n          }, this), !isFinalized && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center space-x-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"w-3 h-3 bg-red-500 rounded\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Editing\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 607,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center space-x-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"w-3 h-3 bg-red-400 rounded\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 610,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Drawing\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 611,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-xs\",\n          children: [editingState.mode === 'none' && 'Click on spine regions to select books', editingState.mode === 'drawing' && 'Click on image to draw spine outline', editingState.mode === 'editing' && 'Drag red vertices to edit spine shape']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 452,\n    columnNumber: 5\n  }, this);\n};\n_s(SpineVisualizer, \"2daiQWLVMKu01TEPqsdlK4yY80E=\");\n_c = SpineVisualizer;\nexport default SpineVisualizer;\nvar _c;\n$RefreshReg$(_c, \"SpineVisualizer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","BookOpen","AlertCircle","Plus","Save","X","Move","jsxDEV","_jsxDEV","Fragment","_Fragment","SpineVisualizer","imageUrl","spineRegions","bookMatches","selectedSpineId","onSpineSelected","isFinalized","onSpineRegionsUpdated","onManualSpineAdded","onStopEditing","editingBookId","_s","imageLoaded","setImageLoaded","hoveredSpineId","setHoveredSpineId","imageScale","setImageScale","scaleX","scaleY","offsetX","offsetY","overlayRect","setOverlayRect","editingState","setEditingState","mode","spineId","vertexIndex","isDragging","drawingPoints","setDrawingPoints","localSpineRegions","setLocalSpineRegions","imageRef","containerRef","svgRef","console","log","length","book","find","b","id","title","spine_region_id","spine","s","current","img","container","containerRect","getBoundingClientRect","imgRect","width","naturalWidth","height","naturalHeight","left","top","getScaledPoints","coordinates","map","x","y","sx","sy","join","getImageCoordinates","svgX","svgY","getCentroid","pts","cx","reduce","a","p","cy","getBookData","handleSpineClick","handleSpineHover","startEditing","startDrawing","updatedRegions","filter","cancelEditing","saveManualDrawing","newSpine","Date","now","Math","min","max","rotation","confidence","handleSvgClick","event","svg","rect","clientX","clientY","imageCoords","prev","handleVertexDragStart","handleVertexDrag","newX","newY","newCoordinates","handleMouseMove","handleVertexDragEnd","renderVertexHandles","_spine$coordinates","coord","index","r","fill","stroke","strokeWidth","cursor","onMouseDown","e","stopPropagation","onMouseUp","style","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","renderDrawingPoints","children","points","strokeDasharray","renderSpineRegion","isSelected","isHovered","isEditing","isDrawing","hasSelection","isOtherSelected","isTargetBook","opacity","onMouseEnter","onMouseLeave","onClick","textAnchor","dominantBaseline","fontSize","fontWeight","findIndex","className","Array","isArray","author_name","first_publish_year","disabled","ref","src","alt","onLoad","onError","onMouseMove","_c","$RefreshReg$"],"sources":["/Users/cooperstevens/Documents/CursorWorkspace copy/Spinecat/web_interface/src/components/SpineVisualizer.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\n\nimport { BookOpen, AlertCircle, Plus, Save, X, Move } from 'lucide-react';\n\nimport { SpineRegion, BookMatch } from '../types';\n\ninterface SpineVisualizerProps {\n  imageUrl: string;\n  spineRegions: SpineRegion[];\n  bookMatches: BookMatch[];\n  selectedSpineId: string | null;\n  onSpineSelected: (spineId: string) => void;\n  isFinalized: boolean;\n  onSpineRegionsUpdated?: (updatedRegions: SpineRegion[]) => void;\n  onManualSpineAdded?: (newSpine: SpineRegion) => void;\n  onStopEditing?: () => void;\n  editingBookId?: string | null; // ID of the book being edited\n}\n\ninterface EditingState {\n  mode: 'none' | 'drawing' | 'editing';\n  spineId: string | null;\n  vertexIndex: number | null;\n  isDragging: boolean;\n}\n\nconst SpineVisualizer: React.FC<SpineVisualizerProps> = ({\n  imageUrl,\n  spineRegions,\n  bookMatches,\n  selectedSpineId,\n  onSpineSelected,\n  isFinalized,\n  onSpineRegionsUpdated,\n  onManualSpineAdded,\n  onStopEditing,\n  editingBookId\n}) => {\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [hoveredSpineId, setHoveredSpineId] = useState<string | null>(null);\n  const [imageScale, setImageScale] = useState({ scaleX: 1, scaleY: 1, offsetX: 0, offsetY: 0 });\n  const [overlayRect, setOverlayRect] = useState<{ left: number; top: number; width: number; height: number } | null>(null);\n  const [editingState, setEditingState] = useState<EditingState>({\n    mode: 'none',\n    spineId: null,\n    vertexIndex: null,\n    isDragging: false\n  });\n  const [drawingPoints, setDrawingPoints] = useState<[number, number][]>([]);\n  const [localSpineRegions, setLocalSpineRegions] = useState<SpineRegion[]>(spineRegions);\n  \n  const imageRef = useRef<HTMLImageElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const svgRef = useRef<SVGSVGElement>(null);\n\n  // Debug logging for editingBookId\n  console.log('🔍 SpineVisualizer render - editingBookId:', editingBookId);\n  console.log('🔍 SpineVisualizer render - editingState:', editingState);\n  console.log('🔍 SpineVisualizer render - spineRegions count:', spineRegions.length);\n  console.log('🔍 SpineVisualizer render - bookMatches count:', bookMatches.length);\n\n  // Auto-enter editing mode when editingBookId changes\n  useEffect(() => {\n    console.log('🔄 useEffect triggered - editingBookId changed to:', editingBookId);\n    if (editingBookId) {\n      console.log('🔄 Auto-entering editing mode for book:', editingBookId);\n      // Find the spine region for this book\n      const book = bookMatches.find(b => b.id === editingBookId);\n      console.log('🔍 Found book:', book?.title, 'spine_region_id:', book?.spine_region_id);\n      if (book && book.spine_region_id) {\n        const spine = spineRegions.find(s => s.id === book.spine_region_id);\n        console.log('🔍 Found spine:', spine?.id);\n        if (spine) {\n          console.log('✅ Found spine, entering editing mode');\n          setEditingState({\n            mode: 'editing',\n            spineId: spine.id,\n            vertexIndex: null,\n            isDragging: false\n          });\n        } else {\n          console.log('❌ No spine found for book, entering drawing mode');\n          setEditingState({\n            mode: 'drawing',\n            spineId: editingBookId,\n            vertexIndex: null,\n            isDragging: false\n          });\n        }\n      } else {\n        console.log('❌ No book or spine_region_id found, entering drawing mode');\n        setEditingState({\n          mode: 'drawing',\n          spineId: editingBookId,\n          vertexIndex: null,\n          isDragging: false\n        });\n      }\n    } else {\n      console.log('🔄 Exiting editing mode');\n      setEditingState({\n        mode: 'none',\n        spineId: null,\n        vertexIndex: null,\n        isDragging: false\n      });\n    }\n  }, [editingBookId, bookMatches, spineRegions]);\n\n  // Sync local spine regions when prop changes\n  useEffect(() => {\n    setLocalSpineRegions(spineRegions);\n  }, [spineRegions]);\n\n  // Calculate image scale and offset when image loads\n  useEffect(() => {\n    if (imageRef.current && imageLoaded) {\n      const img = imageRef.current;\n      const container = containerRef.current;\n      \n      if (container) {\n        const containerRect = container.getBoundingClientRect();\n        const imgRect = img.getBoundingClientRect();\n        \n        // Calculate scale factors\n        const scaleX = imgRect.width / img.naturalWidth;\n        const scaleY = imgRect.height / img.naturalHeight;\n        \n        // Calculate offset (difference between container and image positioning)\n        const offsetX = imgRect.left - containerRect.left;\n        const offsetY = imgRect.top - containerRect.top;\n        \n        setImageScale({ scaleX, scaleY, offsetX, offsetY });\n        setOverlayRect({ left: offsetX, top: offsetY, width: imgRect.width, height: imgRect.height });\n      }\n    }\n  }, [imageLoaded]);\n\n  // Convert spine polygon to scaled SVG points string\n  const getScaledPoints = (spine: SpineRegion) => {\n    if (!spine.coordinates || spine.coordinates.length === 0) return '';\n    return spine.coordinates\n      .map(([x, y]) => {\n        const sx = x * imageScale.scaleX;\n        const sy = y * imageScale.scaleY;\n        return `${sx},${sy}`;\n      })\n      .join(' ');\n  };\n\n  // Convert SVG coordinates back to image coordinates\n  const getImageCoordinates = (svgX: number, svgY: number): [number, number] => {\n    return [svgX / imageScale.scaleX, svgY / imageScale.scaleY];\n  };\n\n  // Compute centroid for label/tooltip positioning within overlay\n  const getCentroid = (spine: SpineRegion) => {\n    if (!spine.coordinates || spine.coordinates.length === 0) return { x: 0, y: 0 };\n    const pts = spine.coordinates;\n    const cx = pts.reduce((a, p) => a + p[0], 0) / pts.length;\n    const cy = pts.reduce((a, p) => a + p[1], 0) / pts.length;\n    return { x: cx * imageScale.scaleX, y: cy * imageScale.scaleY };\n  };\n\n\n\n  // Helper function to get book data for a spine\n  const getBookData = (spineId: string) => {\n    const book = bookMatches.find(book => book.spine_region_id === spineId);\n    console.log('🔍 getBookData for spine:', spineId, 'found book:', book?.id, 'title:', book?.title);\n    return book;\n  };\n\n  // Handle spine region click\n  const handleSpineClick = (spineId: string) => {\n    if (editingState.mode === 'drawing') return; // Don't select while drawing\n    onSpineSelected(spineId);\n  };\n\n  // Handle spine region hover\n  const handleSpineHover = (spineId: string | null) => {\n    if (editingState.mode === 'drawing') return; // Don't hover while drawing\n    setHoveredSpineId(spineId);\n  };\n\n  // Start editing mode for a spine\n  const startEditing = (spineId: string) => {\n    setEditingState({\n      mode: 'editing',\n      spineId,\n      vertexIndex: null,\n      isDragging: false\n    });\n  };\n\n  // Start drawing mode for manual entry\n  const startDrawing = (spineId: string) => {\n    console.log('🎨 Starting drawing mode for spine:', spineId);\n    setEditingState({\n      mode: 'drawing',\n      spineId,\n      vertexIndex: null,\n      isDragging: false\n    });\n    setDrawingPoints([]);\n    \n    // If we're editing an existing book, remove the old spine first\n    if (editingBookId && onSpineRegionsUpdated) {\n      const book = bookMatches.find(b => b.id === editingBookId);\n      if (book && book.spine_region_id) {\n        console.log('🗑️ Removing old spine:', book.spine_region_id);\n        const updatedRegions = localSpineRegions.filter(spine => spine.id !== book.spine_region_id);\n        setLocalSpineRegions(updatedRegions);\n        onSpineRegionsUpdated(updatedRegions);\n      }\n    }\n  };\n\n  // Cancel editing/drawing mode\n  const cancelEditing = () => {\n    setEditingState({\n      mode: 'none',\n      spineId: null,\n      vertexIndex: null,\n      isDragging: false\n    });\n    setDrawingPoints([]);\n  };\n\n  // Save manual drawing\n  const saveManualDrawing = () => {\n    if (drawingPoints.length >= 3 && onManualSpineAdded && editingBookId) {\n      const newSpine: SpineRegion = {\n        id: `manual_${Date.now()}`,\n        x: Math.min(...drawingPoints.map(p => p[0])),\n        y: Math.min(...drawingPoints.map(p => p[1])),\n        width: Math.max(...drawingPoints.map(p => p[0])) - Math.min(...drawingPoints.map(p => p[0])),\n        height: Math.max(...drawingPoints.map(p => p[1])) - Math.min(...drawingPoints.map(p => p[1])),\n        rotation: 0,\n        confidence: 0.9,\n        coordinates: drawingPoints\n      };\n      \n      onManualSpineAdded(newSpine);\n      cancelEditing();\n    }\n  };\n\n  // Handle SVG click for drawing\n  const handleSvgClick = (event: React.MouseEvent<SVGSVGElement>) => {\n    if (editingState.mode !== 'drawing') return;\n    \n    const svg = svgRef.current;\n    if (!svg) return;\n    \n    const rect = svg.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    \n    const imageCoords = getImageCoordinates(x, y);\n    setDrawingPoints(prev => [...prev, imageCoords]);\n  };\n\n  // Handle vertex drag start\n  const handleVertexDragStart = (spineId: string, vertexIndex: number) => {\n    setEditingState(prev => ({\n      ...prev,\n      mode: 'editing',\n      spineId,\n      vertexIndex,\n      isDragging: true\n    }));\n  };\n\n  // Handle vertex drag - use local state for smooth dragging\n  const handleVertexDrag = useCallback((spineId: string, vertexIndex: number, newX: number, newY: number) => {\n    // Don't call onSpineRegionsUpdated during dragging - just update local state\n    // This prevents re-renders and makes dragging smooth\n    const imageCoords = getImageCoordinates(newX, newY);\n    \n    // Update the local spineRegions state for immediate visual feedback\n    setLocalSpineRegions(prev => prev.map(spine => {\n      if (spine.id === spineId && spine.coordinates) {\n        const newCoordinates = [...spine.coordinates];\n        newCoordinates[vertexIndex] = imageCoords;\n        return { ...spine, coordinates: newCoordinates };\n      }\n      return spine;\n    }));\n  }, [imageScale]);\n\n  // Handle mouse move for vertex dragging\n  const handleMouseMove = useCallback((event: React.MouseEvent<SVGSVGElement>) => {\n    if (editingState.mode !== 'editing' || !editingState.isDragging || !editingState.spineId || editingState.vertexIndex === null) return;\n    \n    const svg = svgRef.current;\n    if (!svg) return;\n    \n    const rect = svg.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    \n    handleVertexDrag(editingState.spineId, editingState.vertexIndex, x, y);\n  }, [editingState, handleVertexDrag]);\n\n  // Handle vertex drag end\n  const handleVertexDragEnd = () => {\n    setEditingState(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n    \n    // Sync the local changes back to the parent component\n    if (onSpineRegionsUpdated) {\n      onSpineRegionsUpdated(localSpineRegions);\n    }\n  };\n\n  // Render vertex handles for editing\n  const renderVertexHandles = (spine: SpineRegion) => {\n    if (editingState.mode !== 'editing' || editingState.spineId !== spine.id) return null;\n    \n    return spine.coordinates?.map((coord, index) => {\n      const [x, y] = coord;\n      const svgX = x * imageScale.scaleX;\n      const svgY = y * imageScale.scaleY;\n      \n      return (\n        <circle\n          key={`vertex-${spine.id}-${index}`}\n          cx={svgX}\n          cy={svgY}\n          r={6}\n          fill=\"#FF6B6B\"\n          stroke=\"#FF4757\"\n          strokeWidth={2}\n          cursor=\"move\"\n          onMouseDown={(e) => {\n            e.stopPropagation();\n            handleVertexDragStart(spine.id, index);\n          }}\n          onMouseUp={handleVertexDragEnd}\n          style={{ pointerEvents: editingState.isDragging ? 'none' : 'auto' }}\n        />\n      );\n    });\n  };\n\n  // Render drawing points\n  const renderDrawingPoints = () => {\n    if (editingState.mode !== 'drawing' || drawingPoints.length === 0) return null;\n    \n    return (\n      <g>\n        {/* Draw lines between points */}\n        {drawingPoints.length > 1 && (\n          <polyline\n            points={drawingPoints.map(([x, y]) => `${x * imageScale.scaleX},${y * imageScale.scaleY}`).join(' ')}\n            fill=\"none\"\n            stroke=\"#FF6B6B\"\n            strokeWidth={2}\n            strokeDasharray=\"5,5\"\n          />\n        )}\n        \n        {/* Draw vertex points */}\n        {drawingPoints.map(([x, y], index) => (\n          <circle\n            key={`drawing-${index}`}\n            cx={x * imageScale.scaleX}\n            cy={y * imageScale.scaleY}\n            r={4}\n            fill=\"#FF6B6B\"\n            stroke=\"#FF4757\"\n            strokeWidth={2}\n          />\n        ))}\n      </g>\n    );\n  };\n\n  // Render spine region as polygon within an SVG aligned to the image\n  const renderSpineRegion = (spine: SpineRegion) => {\n    const book = getBookData(spine.id);\n    const points = getScaledPoints(spine);\n    const { x: cx, y: cy } = getCentroid(spine);\n    const isSelected = selectedSpineId === spine.id;\n    const isHovered = hoveredSpineId === spine.id;\n    const isEditing = editingState.mode === 'editing' && editingState.spineId === spine.id;\n    const isDrawing = editingState.mode === 'drawing' && editingState.spineId === spine.id;\n    const hasSelection = selectedSpineId !== null;\n    const isOtherSelected = hasSelection && !isSelected;\n\n    // Debug logging\n    console.log('🔍 Rendering spine:', spine.id, 'editingBookId:', editingBookId, 'book?.spine_region_id:', book?.spine_region_id);\n\n    // Only show spines that are being edited or not in editing mode\n    if (editingBookId && !isEditing && !isDrawing) {\n      // Check if this spine belongs to the book being edited\n      const isTargetBook = book && book.id === editingBookId;\n      if (!isTargetBook) {\n        console.log('🚫 Hiding spine:', spine.id, 'because it\\'s not the editing target book');\n        return null;\n      }\n    }\n\n    const fill = isEditing || isDrawing ? 'rgba(255,107,107,0.3)' : \n                 isSelected ? 'rgba(59,130,246,0.25)' : \n                 isHovered ? 'rgba(59,130,246,0.18)' : \n                 'rgba(59,130,246,0.12)';\n    const stroke = isEditing || isDrawing ? '#FF6B6B' :\n                  isSelected ? '#60A5FA' : \n                  isHovered ? '#3B82F6' : \n                  '#2563EB';\n    const opacity = isOtherSelected && !isEditing && !isDrawing ? 0.35 : 1;\n\n    return (\n      <g key={spine.id} style={{ opacity }}\n         onMouseEnter={() => handleSpineHover(spine.id)}\n         onMouseLeave={() => handleSpineHover(null)}\n         onClick={() => handleSpineClick(spine.id)}\n      >\n        <polygon points={points} fill={fill} stroke={stroke} strokeWidth={2} />\n        \n        {/* Spine number label at centroid */}\n        <text x={cx} y={cy} textAnchor=\"middle\" dominantBaseline=\"middle\" fill=\"#6B7280\" fontSize={12} fontWeight={600}>\n          {spineRegions.findIndex(s => s.id === spine.id) + 1}\n        </text>\n        \n\n        \n        {/* Vertex handles for editing */}\n        {renderVertexHandles(spine)}\n        \n        {/* Tooltip near centroid */}\n        {hoveredSpineId === spine.id && book && overlayRect && !isEditing && (\n          <foreignObject x={Math.min(Math.max(cx + 8, 0), overlayRect.width - 200)} y={Math.max(cy - 40, 0)} width={200} height={80}>\n            <div className=\"bg-gray-900 text-white text-xs px-3 py-2 rounded-lg shadow-lg\" style={{ pointerEvents: 'none' }}>\n              <div className=\"font-medium mb-1 truncate\">{book.title}</div>\n              <div className=\"text-gray-300 truncate\">by {Array.isArray(book.author_name) ? book.author_name.join(', ') : book.author_name || 'Unknown Author'}</div>\n              {book.first_publish_year && (\n                <div className=\"text-gray-400\">{book.first_publish_year}</div>\n              )}\n            </div>\n          </foreignObject>\n        )}\n      </g>\n    );\n  };\n\n  return (\n    <div className=\"card p-0 overflow-hidden\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-500 mb-2\">\n              Book Spine Detection\n            </h3>\n            <p className=\"text-sm text-gray-400\">\n              {spineRegions.length} spine{spineRegions.length !== 1 ? 's' : ''} detected\n              {bookMatches.length > 0 && ` • ${bookMatches.length} book${bookMatches.length !== 1 ? 's' : ''} identified`}\n            </p>\n          </div>\n          \n          {/* Editing Controls */}\n          {!isFinalized && (\n            <div className=\"flex items-center space-x-2\">\n                             {editingState.mode === 'none' && editingBookId && (\n                 <>\n                   <button\n                     onClick={() => startDrawing(editingBookId)}\n                     className=\"btn-secondary text-sm px-3 py-1 flex items-center space-x-1\"\n                   >\n                     <Plus className=\"w-4 h-4\" />\n                     <span>Draw OBB</span>\n                   </button>\n                 </>\n               )}\n              \n              {editingState.mode === 'drawing' && (\n                <>\n                  <button\n                    onClick={saveManualDrawing}\n                    disabled={drawingPoints.length < 3}\n                    className=\"btn-primary text-sm px-3 py-1 flex items-center space-x-1 disabled:opacity-50\"\n                  >\n                    <Save className=\"w-4 h-4\" />\n                    <span>Save OBB</span>\n                  </button>\n                  <button\n                    onClick={cancelEditing}\n                    className=\"btn-danger text-sm px-3 py-1 flex items-center space-x-1\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                    <span>Cancel</span>\n                  </button>\n                </>\n              )}\n              \n                            {editingState.mode === 'editing' && (\n                <>\n                  <button\n                    onClick={() => startDrawing(editingBookId || '')}\n                    className=\"btn-secondary text-sm px-3 py-1 flex items-center space-x-1\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                    <span>Draw New OBB</span>\n                  </button>\n                  <div className=\"text-sm text-gray-400 px-3 py-1 flex items-center space-x-1\">\n                    <Move className=\"w-4 h-4\" />\n                    <span>Drag vertices to edit</span>\n                  </div>\n                  <button\n                    onClick={() => {\n                      cancelEditing();\n                      if (onStopEditing) onStopEditing();\n                    }}\n                    className=\"btn-primary text-sm px-3 py-1 flex items-center space-x-1\"\n                  >\n                    <Save className=\"w-4 h-4\" />\n                    <span>Done</span>\n                  </button>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Image Container */}\n      <div \n        ref={containerRef}\n        className=\"relative bg-gray-100 min-h-[400px] flex items-center justify-center\"\n      >\n        {!imageLoaded && (\n          <div className=\"text-center text-gray-400\">\n            <BookOpen className=\"w-12 h-12 mx-auto mb-2 text-gray-400\" />\n            <p>Loading image...</p>\n          </div>\n        )}\n\n        {/* Main Image */}\n        <img\n          ref={imageRef}\n          src={imageUrl}\n          alt=\"Book spines\"\n          className=\"max-w-full max-h-[600px] object-contain\"\n          onLoad={() => setImageLoaded(true)}\n          onError={() => setImageLoaded(false)}\n        />\n\n        {/* Spine Regions Overlay */}\n        {imageLoaded && overlayRect && (\n          <svg\n            ref={svgRef}\n            className=\"absolute cursor-crosshair\"\n            style={{ left: overlayRect.left, top: overlayRect.top }}\n            width={overlayRect.width}\n            height={overlayRect.height}\n            onClick={handleSvgClick}\n            onMouseMove={handleMouseMove}\n            onMouseUp={handleVertexDragEnd}\n          >\n            {localSpineRegions.map(renderSpineRegion)}\n            {renderDrawingPoints()}\n          </svg>\n        )}\n\n        {/* No Spines Detected */}\n        {imageLoaded && spineRegions.length === 0 && editingState.mode !== 'drawing' && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-white bg-opacity-90\">\n            <div className=\"text-center text-gray-400\">\n              <AlertCircle className=\"w-12 h-12 mx-auto mb-2 text-gray-400\" />\n              <p className=\"text-lg font-medium\">No book spines detected</p>\n              <p className=\"text-sm\">Try uploading a clearer image or draw spines manually</p>\n            </div>\n          </div>\n        )}\n\n        {/* Drawing Instructions */}\n        {imageLoaded && editingState.mode === 'drawing' && (\n          <div className=\"absolute top-4 left-4 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg\">\n            <p className=\"text-sm font-medium\">Click to add vertices. Need at least 3 points.</p>\n            <p className=\"text-xs opacity-90\">Click \"Save OBB\" when done</p>\n          </div>\n        )}\n      </div>\n\n      {/* Legend */}\n      {spineRegions.length > 0 && (\n        <div className=\"p-4 bg-gray-50 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between text-sm text-gray-400\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-primary-500 rounded\"></div>\n                <span>Detected spine</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-primary-600 rounded ring-2 ring-primary-400\"></div>\n                <span>Selected</span>\n              </div>\n              {!isFinalized && (\n                <>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-red-500 rounded\"></div>\n                    <span>Editing</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-red-400 rounded\"></div>\n                    <span>Drawing</span>\n                  </div>\n                </>\n              )}\n            </div>\n            \n            <div className=\"text-xs\">\n              {editingState.mode === 'none' && 'Click on spine regions to select books'}\n              {editingState.mode === 'drawing' && 'Click on image to draw spine outline'}\n              {editingState.mode === 'editing' && 'Drag red vertices to edit spine shape'}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpineVisualizer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}