{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nclass ApiService {\n  constructor(baseUrl = API_BASE_URL) {\n    this.baseUrl = void 0;\n    this.baseUrl = baseUrl;\n  }\n\n  /**\r\n   * Check if the backend is healthy and ready\r\n   */\n  async checkHealth() {\n    try {\n      const response = await fetch(`${this.baseUrl}/health`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Health check failed:', error);\n      throw new Error('Backend is not available');\n    }\n  }\n\n  /**\r\n   * Process an uploaded image through the Spinecat pipeline\r\n   */\n  async processImage(file) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await fetch(`${this.baseUrl}/api/process-image`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n\n      // Debug logging\n      console.log('Backend API response:', result);\n      console.log('Spine regions from backend:', result.spine_regions);\n\n      // Convert the API response to our frontend types\n      const convertedResult = {\n        image_url: URL.createObjectURL(file),\n        total_spines: result.total_spines,\n        successful_matches: result.successful_matches,\n        perfect_matches: result.successful_matches,\n        spine_regions: result.spine_regions.map(spine => {\n          // Debug logging for each spine\n          console.log('Processing spine:', spine);\n          console.log('Spine bbox:', spine.bbox);\n          const bbox = spine.bbox || [];\n          let x = 0,\n            y = 0,\n            width = 0,\n            height = 0,\n            rotation = 0;\n          if (bbox.length >= 8) {\n            const xCoords = [bbox[0], bbox[2], bbox[4], bbox[6]];\n            const yCoords = [bbox[1], bbox[3], bbox[5], bbox[7]];\n            x = Math.min(...xCoords);\n            y = Math.min(...yCoords);\n            width = Math.max(...xCoords) - x;\n            height = Math.max(...yCoords) - y;\n            if (bbox.length >= 4) {\n              const dx = bbox[2] - bbox[0];\n              const dy = bbox[3] - bbox[1];\n              rotation = Math.atan2(dy, dx) * (180 / Math.PI);\n            }\n            console.log('Converted coordinates:', {\n              x,\n              y,\n              width,\n              height,\n              rotation\n            });\n          } else {\n            console.log('Invalid bbox length:', bbox.length);\n          }\n          const convertedSpine = {\n            id: spine.id,\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            rotation: rotation,\n            confidence: spine.confidence,\n            coordinates: bbox.length >= 8 ? [[bbox[0], bbox[1]], [bbox[2], bbox[3]], [bbox[4], bbox[5]], [bbox[6], bbox[7]]] : [],\n            ocr_text: spine.ocr_text || \"\",\n            denoised_text: spine.denoised_text || \"\"\n          };\n          console.log('Converted spine:', convertedSpine);\n          return convertedSpine;\n        }),\n        book_matches: result.book_matches.map(match => ({\n          id: match.spine_id || `match_${Math.random()}`,\n          title: match.title || \"\",\n          author_name: match.author ? [match.author] : [],\n          first_publish_year: match.year ? parseInt(match.year) : null,\n          publisher: \"\",\n          match_score: match.confidence || 0,\n          match_type: match.confidence > 0.8 ? 'exact' : match.confidence > 0.6 ? 'strong' : match.confidence > 0.4 ? 'moderate' : 'weak',\n          confidence: match.confidence || 0,\n          ocr_text: \"\",\n          spine_region_id: match.spine_id || \"\"\n        })),\n        ocr_failures: result.ocr_failures.map(failure => ({\n          spine_id: failure.spine_id,\n          bbox: failure.bbox,\n          confidence: failure.confidence\n        })),\n        processing_time: result.processing_time\n      };\n\n      // Debug logging for final result\n      console.log('Final converted spine regions:', convertedResult.spine_regions.map(spine => ({\n        id: spine.id,\n        x: spine.x,\n        y: spine.y,\n        width: spine.width,\n        height: spine.height\n      })));\n      return convertedResult;\n    } catch (error) {\n      console.error('Image processing failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Search for books using the Open Library API\r\n   */\n  async searchBooks(query, limit = 5) {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/search-books?query=${encodeURIComponent(query)}&limit=${limit}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      return result.results || [];\n    } catch (error) {\n      console.error('Book search failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get the current API status\r\n   */\n  getApiStatus() {\n    return {\n      baseUrl: this.baseUrl,\n      isAvailable: false // Will be updated by health check\n    };\n  }\n}\n\n// Create and export a singleton instance\nexport const apiService = new ApiService();\n\n// Export the class for testing\nexport { ApiService };","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseUrl","checkHealth","response","fetch","ok","Error","status","json","error","console","processImage","file","formData","FormData","append","method","body","errorData","detail","result","log","spine_regions","convertedResult","image_url","URL","createObjectURL","total_spines","successful_matches","perfect_matches","map","spine","bbox","x","y","width","height","rotation","length","xCoords","yCoords","Math","min","max","dx","dy","atan2","PI","convertedSpine","id","confidence","coordinates","ocr_text","denoised_text","book_matches","match","spine_id","random","title","author_name","author","first_publish_year","year","parseInt","publisher","match_score","match_type","spine_region_id","ocr_failures","failure","processing_time","searchBooks","query","limit","encodeURIComponent","results","getApiStatus","isAvailable","apiService"],"sources":["C:/Users/coope/CursorWorkspace/Spinecat/web_interface/src/services/api.ts"],"sourcesContent":["import { ProcessingResult, OpenLibrarySearchResult } from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nclass ApiService {\r\n  private baseUrl: string;\r\n\r\n  constructor(baseUrl: string = API_BASE_URL) {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  /**\r\n   * Check if the backend is healthy and ready\r\n   */\r\n  async checkHealth(): Promise<{ status: string; pipeline: string }> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/health`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Health check failed:', error);\r\n      throw new Error('Backend is not available');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process an uploaded image through the Spinecat pipeline\r\n   */\r\n  async processImage(file: File): Promise<ProcessingResult> {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n\r\n      const response = await fetch(`${this.baseUrl}/api/process-image`, {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      // Debug logging\r\n      console.log('Backend API response:', result);\r\n      console.log('Spine regions from backend:', result.spine_regions);\r\n      \r\n      // Convert the API response to our frontend types\r\n      const convertedResult = {\r\n        image_url: URL.createObjectURL(file),\r\n        total_spines: result.total_spines,\r\n        successful_matches: result.successful_matches,\r\n        perfect_matches: result.successful_matches,\r\n        spine_regions: result.spine_regions.map((spine: any) => {\r\n          // Debug logging for each spine\r\n          console.log('Processing spine:', spine);\r\n          console.log('Spine bbox:', spine.bbox);\r\n          \r\n          const bbox = spine.bbox || [];\r\n          let x = 0, y = 0, width = 0, height = 0, rotation = 0;\r\n          \r\n          if (bbox.length >= 8) {\r\n            const xCoords = [bbox[0], bbox[2], bbox[4], bbox[6]];\r\n            const yCoords = [bbox[1], bbox[3], bbox[5], bbox[7]];\r\n            x = Math.min(...xCoords);\r\n            y = Math.min(...yCoords);\r\n            width = Math.max(...xCoords) - x;\r\n            height = Math.max(...yCoords) - y;\r\n            \r\n            if (bbox.length >= 4) {\r\n              const dx = bbox[2] - bbox[0];\r\n              const dy = bbox[3] - bbox[1];\r\n              rotation = Math.atan2(dy, dx) * (180 / Math.PI);\r\n            }\r\n            \r\n            console.log('Converted coordinates:', { x, y, width, height, rotation });\r\n          } else {\r\n            console.log('Invalid bbox length:', bbox.length);\r\n          }\r\n          \r\n          const convertedSpine = {\r\n            id: spine.id,\r\n            x: x,\r\n            y: y,\r\n            width: width,\r\n            height: height,\r\n            rotation: rotation,\r\n            confidence: spine.confidence,\r\n            coordinates: bbox.length >= 8 ? [\r\n              [bbox[0], bbox[1]], [bbox[2], bbox[3]], \r\n              [bbox[4], bbox[5]], [bbox[6], bbox[7]]\r\n            ] : [],\r\n            ocr_text: spine.ocr_text || \"\",\r\n            denoised_text: spine.denoised_text || \"\",\r\n          };\r\n          \r\n          console.log('Converted spine:', convertedSpine);\r\n          return convertedSpine;\r\n        }),\r\n        book_matches: result.book_matches.map((match: any) => ({\r\n          id: match.spine_id || `match_${Math.random()}`,\r\n          title: match.title || \"\",\r\n          author_name: match.author ? [match.author] : [],\r\n          first_publish_year: match.year ? parseInt(match.year) : null,\r\n          publisher: \"\",\r\n          match_score: match.confidence || 0,\r\n          match_type: match.confidence > 0.8 ? 'exact' : match.confidence > 0.6 ? 'strong' : match.confidence > 0.4 ? 'moderate' : 'weak',\r\n          confidence: match.confidence || 0,\r\n          ocr_text: \"\",\r\n          spine_region_id: match.spine_id || \"\",\r\n        })),\r\n        ocr_failures: result.ocr_failures.map((failure: any) => ({\r\n          spine_id: failure.spine_id,\r\n          bbox: failure.bbox,\r\n          confidence: failure.confidence,\r\n        })),\r\n        processing_time: result.processing_time,\r\n      };\r\n      \r\n      // Debug logging for final result\r\n      console.log('Final converted spine regions:', convertedResult.spine_regions.map((spine: any) => ({\r\n        id: spine.id,\r\n        x: spine.x,\r\n        y: spine.y,\r\n        width: spine.width,\r\n        height: spine.height\r\n      })));\r\n      \r\n      return convertedResult;\r\n    } catch (error) {\r\n      console.error('Image processing failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search for books using the Open Library API\r\n   */\r\n  async searchBooks(query: string, limit: number = 5): Promise<OpenLibrarySearchResult[]> {\r\n    try {\r\n      const response = await fetch(\r\n        `${this.baseUrl}/api/search-books?query=${encodeURIComponent(query)}&limit=${limit}`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result.results || [];\r\n    } catch (error) {\r\n      console.error('Book search failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the current API status\r\n   */\r\n  getApiStatus(): { baseUrl: string; isAvailable: boolean } {\r\n    return {\r\n      baseUrl: this.baseUrl,\r\n      isAvailable: false, // Will be updated by health check\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nexport const apiService = new ApiService();\r\n\r\n// Export the class for testing\r\nexport { ApiService };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}