{"ast":null,"code":"import _objectSpread from\"/Users/cooperstevens/Documents/CursorWorkspace copy/Spinecat/web_interface/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useRef,useEffect,useCallback}from'react';import{BookOpen,AlertCircle,Plus,Save,X,Move}from'lucide-react';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const SpineVisualizer=_ref=>{let{imageUrl,spineRegions,bookMatches,selectedSpineId,onSpineSelected,isFinalized,onSpineRegionsUpdated,onManualSpineAdded,onStopEditing,editingBookId}=_ref;const[imageLoaded,setImageLoaded]=useState(false);const[hoveredSpineId,setHoveredSpineId]=useState(null);const[imageScale,setImageScale]=useState({scaleX:1,scaleY:1,offsetX:0,offsetY:0});const[overlayRect,setOverlayRect]=useState(null);const[editingState,setEditingState]=useState({mode:'none',spineId:null,vertexIndex:null,isDragging:false});const[drawingPoints,setDrawingPoints]=useState([]);const[localSpineRegions,setLocalSpineRegions]=useState(spineRegions);const imageRef=useRef(null);const containerRef=useRef(null);const svgRef=useRef(null);// Debug logging for editingBookId\nconsole.log('🔍 SpineVisualizer render - editingBookId:',editingBookId);console.log('🔍 SpineVisualizer render - editingState:',editingState);console.log('🔍 SpineVisualizer render - spineRegions count:',spineRegions.length);console.log('🔍 SpineVisualizer render - bookMatches count:',bookMatches.length);// Auto-enter editing mode when editingBookId changes\nuseEffect(()=>{console.log('🔄 useEffect triggered - editingBookId changed to:',editingBookId);if(editingBookId){console.log('🔄 Auto-entering editing mode for book:',editingBookId);// Find the spine region for this book\nconst book=bookMatches.find(b=>b.id===editingBookId);console.log('🔍 Found book:',book===null||book===void 0?void 0:book.title,'spine_region_id:',book===null||book===void 0?void 0:book.spine_region_id);if(book&&book.spine_region_id){const spine=spineRegions.find(s=>s.id===book.spine_region_id);console.log('🔍 Found spine:',spine===null||spine===void 0?void 0:spine.id);if(spine){console.log('✅ Found spine, entering editing mode');setEditingState({mode:'editing',spineId:spine.id,vertexIndex:null,isDragging:false});}else{console.log('❌ No spine found for book, entering drawing mode');setEditingState({mode:'drawing',spineId:editingBookId,vertexIndex:null,isDragging:false});}}else{console.log('❌ No book or spine_region_id found, entering drawing mode');setEditingState({mode:'drawing',spineId:editingBookId,vertexIndex:null,isDragging:false});}}else{console.log('🔄 Exiting editing mode');setEditingState({mode:'none',spineId:null,vertexIndex:null,isDragging:false});}},[editingBookId,bookMatches,spineRegions]);// Sync local spine regions when prop changes\nuseEffect(()=>{setLocalSpineRegions(spineRegions);},[spineRegions]);// Calculate image scale and offset when image loads\nuseEffect(()=>{if(imageRef.current&&imageLoaded){const img=imageRef.current;const container=containerRef.current;if(container){const containerRect=container.getBoundingClientRect();const imgRect=img.getBoundingClientRect();// Calculate scale factors\nconst scaleX=imgRect.width/img.naturalWidth;const scaleY=imgRect.height/img.naturalHeight;// Calculate offset (difference between container and image positioning)\nconst offsetX=imgRect.left-containerRect.left;const offsetY=imgRect.top-containerRect.top;setImageScale({scaleX,scaleY,offsetX,offsetY});setOverlayRect({left:offsetX,top:offsetY,width:imgRect.width,height:imgRect.height});}}},[imageLoaded]);// Convert spine polygon to scaled SVG points string\nconst getScaledPoints=spine=>{if(!spine.coordinates||spine.coordinates.length===0)return'';return spine.coordinates.map(_ref2=>{let[x,y]=_ref2;const sx=x*imageScale.scaleX;const sy=y*imageScale.scaleY;return\"\".concat(sx,\",\").concat(sy);}).join(' ');};// Convert SVG coordinates back to image coordinates\nconst getImageCoordinates=(svgX,svgY)=>{return[svgX/imageScale.scaleX,svgY/imageScale.scaleY];};// Compute centroid for label/tooltip positioning within overlay\nconst getCentroid=spine=>{if(!spine.coordinates||spine.coordinates.length===0)return{x:0,y:0};const pts=spine.coordinates;const cx=pts.reduce((a,p)=>a+p[0],0)/pts.length;const cy=pts.reduce((a,p)=>a+p[1],0)/pts.length;return{x:cx*imageScale.scaleX,y:cy*imageScale.scaleY};};// Helper function to get spine region by ID\nconst getSpineRegion=id=>{return spineRegions.find(spine=>spine.id===id);};// Helper function to get book data for a spine\nconst getBookData=spineId=>{const book=bookMatches.find(book=>book.spine_region_id===spineId);console.log('🔍 getBookData for spine:',spineId,'found book:',book===null||book===void 0?void 0:book.id,'title:',book===null||book===void 0?void 0:book.title);return book;};// Handle spine region click\nconst handleSpineClick=spineId=>{if(editingState.mode==='drawing')return;// Don't select while drawing\nonSpineSelected(spineId);};// Handle spine region hover\nconst handleSpineHover=spineId=>{if(editingState.mode==='drawing')return;// Don't hover while drawing\nsetHoveredSpineId(spineId);};// Start editing mode for a spine\nconst startEditing=spineId=>{setEditingState({mode:'editing',spineId,vertexIndex:null,isDragging:false});};// Start drawing mode for manual entry\nconst startDrawing=spineId=>{console.log('🎨 Starting drawing mode for spine:',spineId);setEditingState({mode:'drawing',spineId,vertexIndex:null,isDragging:false});setDrawingPoints([]);// If we're editing an existing book, remove the old spine first\nif(editingBookId&&onSpineRegionsUpdated){const book=bookMatches.find(b=>b.id===editingBookId);if(book&&book.spine_region_id){console.log('🗑️ Removing old spine:',book.spine_region_id);const updatedRegions=localSpineRegions.filter(spine=>spine.id!==book.spine_region_id);setLocalSpineRegions(updatedRegions);onSpineRegionsUpdated(updatedRegions);}}};// Cancel editing/drawing mode\nconst cancelEditing=()=>{setEditingState({mode:'none',spineId:null,vertexIndex:null,isDragging:false});setDrawingPoints([]);};// Save manual drawing\nconst saveManualDrawing=()=>{if(drawingPoints.length>=3&&onManualSpineAdded&&editingBookId){const newSpine={id:\"manual_\".concat(Date.now()),x:Math.min(...drawingPoints.map(p=>p[0])),y:Math.min(...drawingPoints.map(p=>p[1])),width:Math.max(...drawingPoints.map(p=>p[0]))-Math.min(...drawingPoints.map(p=>p[0])),height:Math.max(...drawingPoints.map(p=>p[1]))-Math.min(...drawingPoints.map(p=>p[1])),rotation:0,confidence:0.9,coordinates:drawingPoints};onManualSpineAdded(newSpine);cancelEditing();}};// Handle SVG click for drawing\nconst handleSvgClick=event=>{if(editingState.mode!=='drawing')return;const svg=svgRef.current;if(!svg)return;const rect=svg.getBoundingClientRect();const x=event.clientX-rect.left;const y=event.clientY-rect.top;const imageCoords=getImageCoordinates(x,y);setDrawingPoints(prev=>[...prev,imageCoords]);};// Handle vertex drag start\nconst handleVertexDragStart=(spineId,vertexIndex)=>{setEditingState(prev=>_objectSpread(_objectSpread({},prev),{},{mode:'editing',spineId,vertexIndex,isDragging:true}));};// Handle vertex drag - use local state for smooth dragging\nconst handleVertexDrag=useCallback((spineId,vertexIndex,newX,newY)=>{// Don't call onSpineRegionsUpdated during dragging - just update local state\n// This prevents re-renders and makes dragging smooth\nconst imageCoords=getImageCoordinates(newX,newY);// Update the local spineRegions state for immediate visual feedback\nsetLocalSpineRegions(prev=>prev.map(spine=>{if(spine.id===spineId&&spine.coordinates){const newCoordinates=[...spine.coordinates];newCoordinates[vertexIndex]=imageCoords;return _objectSpread(_objectSpread({},spine),{},{coordinates:newCoordinates});}return spine;}));},[imageScale]);// Handle mouse move for vertex dragging\nconst handleMouseMove=useCallback(event=>{if(editingState.mode!=='editing'||!editingState.isDragging||!editingState.spineId||editingState.vertexIndex===null)return;const svg=svgRef.current;if(!svg)return;const rect=svg.getBoundingClientRect();const x=event.clientX-rect.left;const y=event.clientY-rect.top;handleVertexDrag(editingState.spineId,editingState.vertexIndex,x,y);},[editingState,handleVertexDrag]);// Handle vertex drag end\nconst handleVertexDragEnd=()=>{setEditingState(prev=>_objectSpread(_objectSpread({},prev),{},{isDragging:false}));// Sync the local changes back to the parent component\nif(onSpineRegionsUpdated){onSpineRegionsUpdated(localSpineRegions);}};// Render vertex handles for editing\nconst renderVertexHandles=spine=>{var _spine$coordinates;if(editingState.mode!=='editing'||editingState.spineId!==spine.id)return null;return(_spine$coordinates=spine.coordinates)===null||_spine$coordinates===void 0?void 0:_spine$coordinates.map((coord,index)=>{const[x,y]=coord;const svgX=x*imageScale.scaleX;const svgY=y*imageScale.scaleY;return/*#__PURE__*/_jsx(\"circle\",{cx:svgX,cy:svgY,r:6,fill:\"#FF6B6B\",stroke:\"#FF4757\",strokeWidth:2,cursor:\"move\",onMouseDown:e=>{e.stopPropagation();handleVertexDragStart(spine.id,index);},onMouseUp:handleVertexDragEnd,style:{pointerEvents:editingState.isDragging?'none':'auto'}},\"vertex-\".concat(spine.id,\"-\").concat(index));});};// Render drawing points\nconst renderDrawingPoints=()=>{if(editingState.mode!=='drawing'||drawingPoints.length===0)return null;return/*#__PURE__*/_jsxs(\"g\",{children:[drawingPoints.length>1&&/*#__PURE__*/_jsx(\"polyline\",{points:drawingPoints.map(_ref3=>{let[x,y]=_ref3;return\"\".concat(x*imageScale.scaleX,\",\").concat(y*imageScale.scaleY);}).join(' '),fill:\"none\",stroke:\"#FF6B6B\",strokeWidth:2,strokeDasharray:\"5,5\"}),drawingPoints.map((_ref4,index)=>{let[x,y]=_ref4;return/*#__PURE__*/_jsx(\"circle\",{cx:x*imageScale.scaleX,cy:y*imageScale.scaleY,r:4,fill:\"#FF6B6B\",stroke:\"#FF4757\",strokeWidth:2},\"drawing-\".concat(index));})]});};// Render spine region as polygon within an SVG aligned to the image\nconst renderSpineRegion=spine=>{const book=getBookData(spine.id);const points=getScaledPoints(spine);const{x:cx,y:cy}=getCentroid(spine);const isSelected=selectedSpineId===spine.id;const isHovered=hoveredSpineId===spine.id;const isEditing=editingState.mode==='editing'&&editingState.spineId===spine.id;const isDrawing=editingState.mode==='drawing'&&editingState.spineId===spine.id;const hasSelection=selectedSpineId!==null;const isOtherSelected=hasSelection&&!isSelected;// Debug logging\nconsole.log('🔍 Rendering spine:',spine.id,'editingBookId:',editingBookId,'book?.spine_region_id:',book===null||book===void 0?void 0:book.spine_region_id);// Only show spines that are being edited or not in editing mode\nif(editingBookId&&!isEditing&&!isDrawing){// Check if this spine belongs to the book being edited\nconst isTargetBook=book&&book.id===editingBookId;if(!isTargetBook){console.log('🚫 Hiding spine:',spine.id,'because it\\'s not the editing target book');return null;}}const fill=isEditing||isDrawing?'rgba(255,107,107,0.3)':isSelected?'rgba(59,130,246,0.25)':isHovered?'rgba(59,130,246,0.18)':'rgba(59,130,246,0.12)';const stroke=isEditing||isDrawing?'#FF6B6B':isSelected?'#60A5FA':isHovered?'#3B82F6':'#2563EB';const opacity=isOtherSelected&&!isEditing&&!isDrawing?0.35:1;return/*#__PURE__*/_jsxs(\"g\",{style:{opacity},onMouseEnter:()=>handleSpineHover(spine.id),onMouseLeave:()=>handleSpineHover(null),onClick:()=>handleSpineClick(spine.id),children:[/*#__PURE__*/_jsx(\"polygon\",{points:points,fill:fill,stroke:stroke,strokeWidth:2}),/*#__PURE__*/_jsx(\"text\",{x:cx,y:cy,textAnchor:\"middle\",dominantBaseline:\"middle\",fill:\"#6B7280\",fontSize:12,fontWeight:600,children:spineRegions.findIndex(s=>s.id===spine.id)+1}),renderVertexHandles(spine),hoveredSpineId===spine.id&&book&&overlayRect&&!isEditing&&/*#__PURE__*/_jsx(\"foreignObject\",{x:Math.min(Math.max(cx+8,0),overlayRect.width-200),y:Math.max(cy-40,0),width:200,height:80,children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-gray-900 text-white text-xs px-3 py-2 rounded-lg shadow-lg\",style:{pointerEvents:'none'},children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-medium mb-1 truncate\",children:book.title}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-gray-300 truncate\",children:[\"by \",Array.isArray(book.author_name)?book.author_name.join(', '):book.author_name||'Unknown Author']}),book.first_publish_year&&/*#__PURE__*/_jsx(\"div\",{className:\"text-gray-400\",children:book.first_publish_year})]})})]},spine.id);};return/*#__PURE__*/_jsxs(\"div\",{className:\"card p-0 overflow-hidden\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"p-6 border-b border-gray-200\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold text-gray-500 mb-2\",children:\"Book Spine Detection\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-sm text-gray-400\",children:[spineRegions.length,\" spine\",spineRegions.length!==1?'s':'',\" detected\",bookMatches.length>0&&\" \\u2022 \".concat(bookMatches.length,\" book\").concat(bookMatches.length!==1?'s':'',\" identified\")]})]}),!isFinalized&&/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-2\",children:[editingState.mode==='none'&&editingBookId&&/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"button\",{onClick:()=>startDrawing(editingBookId),className:\"btn-secondary text-sm px-3 py-1 flex items-center space-x-1\",children:[/*#__PURE__*/_jsx(Plus,{className:\"w-4 h-4\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Draw OBB\"})]})}),editingState.mode==='drawing'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"button\",{onClick:saveManualDrawing,disabled:drawingPoints.length<3,className:\"btn-primary text-sm px-3 py-1 flex items-center space-x-1 disabled:opacity-50\",children:[/*#__PURE__*/_jsx(Save,{className:\"w-4 h-4\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Save OBB\"})]}),/*#__PURE__*/_jsxs(\"button\",{onClick:cancelEditing,className:\"btn-danger text-sm px-3 py-1 flex items-center space-x-1\",children:[/*#__PURE__*/_jsx(X,{className:\"w-4 h-4\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Cancel\"})]})]}),editingState.mode==='editing'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"button\",{onClick:()=>startDrawing(editingBookId||''),className:\"btn-secondary text-sm px-3 py-1 flex items-center space-x-1\",children:[/*#__PURE__*/_jsx(Plus,{className:\"w-4 h-4\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Draw New OBB\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-gray-400 px-3 py-1 flex items-center space-x-1\",children:[/*#__PURE__*/_jsx(Move,{className:\"w-4 h-4\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Drag vertices to edit\"})]}),/*#__PURE__*/_jsxs(\"button\",{onClick:()=>{cancelEditing();if(onStopEditing)onStopEditing();},className:\"btn-primary text-sm px-3 py-1 flex items-center space-x-1\",children:[/*#__PURE__*/_jsx(Save,{className:\"w-4 h-4\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Done\"})]})]})]})]})}),/*#__PURE__*/_jsxs(\"div\",{ref:containerRef,className:\"relative bg-gray-100 min-h-[400px] flex items-center justify-center\",children:[!imageLoaded&&/*#__PURE__*/_jsxs(\"div\",{className:\"text-center text-gray-400\",children:[/*#__PURE__*/_jsx(BookOpen,{className:\"w-12 h-12 mx-auto mb-2 text-gray-400\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Loading image...\"})]}),/*#__PURE__*/_jsx(\"img\",{ref:imageRef,src:imageUrl,alt:\"Book spines\",className:\"max-w-full max-h-[600px] object-contain\",onLoad:()=>setImageLoaded(true),onError:()=>setImageLoaded(false)}),imageLoaded&&overlayRect&&/*#__PURE__*/_jsxs(\"svg\",{ref:svgRef,className:\"absolute cursor-crosshair\",style:{left:overlayRect.left,top:overlayRect.top},width:overlayRect.width,height:overlayRect.height,onClick:handleSvgClick,onMouseMove:handleMouseMove,onMouseUp:handleVertexDragEnd,children:[localSpineRegions.map(renderSpineRegion),renderDrawingPoints()]}),imageLoaded&&spineRegions.length===0&&editingState.mode!=='drawing'&&/*#__PURE__*/_jsx(\"div\",{className:\"absolute inset-0 flex items-center justify-center bg-white bg-opacity-90\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center text-gray-400\",children:[/*#__PURE__*/_jsx(AlertCircle,{className:\"w-12 h-12 mx-auto mb-2 text-gray-400\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-lg font-medium\",children:\"No book spines detected\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-sm\",children:\"Try uploading a clearer image or draw spines manually\"})]})}),imageLoaded&&editingState.mode==='drawing'&&/*#__PURE__*/_jsxs(\"div\",{className:\"absolute top-4 left-4 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"text-sm font-medium\",children:\"Click to add vertices. Need at least 3 points.\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-xs opacity-90\",children:\"Click \\\"Save OBB\\\" when done\"})]})]}),spineRegions.length>0&&/*#__PURE__*/_jsx(\"div\",{className:\"p-4 bg-gray-50 border-t border-gray-200\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between text-sm text-gray-400\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-2\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-3 h-3 bg-primary-500 rounded\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Detected spine\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-2\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-3 h-3 bg-primary-600 rounded ring-2 ring-primary-400\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Selected\"})]}),!isFinalized&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-2\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-3 h-3 bg-red-500 rounded\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Editing\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-2\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-3 h-3 bg-red-400 rounded\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Drawing\"})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs\",children:[editingState.mode==='none'&&'Click on spine regions to select books',editingState.mode==='drawing'&&'Click on image to draw spine outline',editingState.mode==='editing'&&'Drag red vertices to edit spine shape']})]})})]});};export default SpineVisualizer;","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","BookOpen","AlertCircle","Plus","Save","X","Move","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","SpineVisualizer","_ref","imageUrl","spineRegions","bookMatches","selectedSpineId","onSpineSelected","isFinalized","onSpineRegionsUpdated","onManualSpineAdded","onStopEditing","editingBookId","imageLoaded","setImageLoaded","hoveredSpineId","setHoveredSpineId","imageScale","setImageScale","scaleX","scaleY","offsetX","offsetY","overlayRect","setOverlayRect","editingState","setEditingState","mode","spineId","vertexIndex","isDragging","drawingPoints","setDrawingPoints","localSpineRegions","setLocalSpineRegions","imageRef","containerRef","svgRef","console","log","length","book","find","b","id","title","spine_region_id","spine","s","current","img","container","containerRect","getBoundingClientRect","imgRect","width","naturalWidth","height","naturalHeight","left","top","getScaledPoints","coordinates","map","_ref2","x","y","sx","sy","concat","join","getImageCoordinates","svgX","svgY","getCentroid","pts","cx","reduce","a","p","cy","getSpineRegion","getBookData","handleSpineClick","handleSpineHover","startEditing","startDrawing","updatedRegions","filter","cancelEditing","saveManualDrawing","newSpine","Date","now","Math","min","max","rotation","confidence","handleSvgClick","event","svg","rect","clientX","clientY","imageCoords","prev","handleVertexDragStart","_objectSpread","handleVertexDrag","newX","newY","newCoordinates","handleMouseMove","handleVertexDragEnd","renderVertexHandles","_spine$coordinates","coord","index","r","fill","stroke","strokeWidth","cursor","onMouseDown","e","stopPropagation","onMouseUp","style","pointerEvents","renderDrawingPoints","children","points","_ref3","strokeDasharray","_ref4","renderSpineRegion","isSelected","isHovered","isEditing","isDrawing","hasSelection","isOtherSelected","isTargetBook","opacity","onMouseEnter","onMouseLeave","onClick","textAnchor","dominantBaseline","fontSize","fontWeight","findIndex","className","Array","isArray","author_name","first_publish_year","disabled","ref","src","alt","onLoad","onError","onMouseMove"],"sources":["/Users/cooperstevens/Documents/CursorWorkspace copy/Spinecat/web_interface/src/components/SpineVisualizer.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { motion } from 'framer-motion';\nimport { BookOpen, AlertCircle, Edit3, Plus, Save, X, Move } from 'lucide-react';\n\nimport { SpineRegion, BookMatch } from '../types';\n\ninterface SpineVisualizerProps {\n  imageUrl: string;\n  spineRegions: SpineRegion[];\n  bookMatches: BookMatch[];\n  selectedSpineId: string | null;\n  onSpineSelected: (spineId: string) => void;\n  isFinalized: boolean;\n  onSpineRegionsUpdated?: (updatedRegions: SpineRegion[]) => void;\n  onManualSpineAdded?: (newSpine: SpineRegion) => void;\n  onStopEditing?: () => void;\n  editingBookId?: string | null; // ID of the book being edited\n}\n\ninterface EditingState {\n  mode: 'none' | 'drawing' | 'editing';\n  spineId: string | null;\n  vertexIndex: number | null;\n  isDragging: boolean;\n}\n\nconst SpineVisualizer: React.FC<SpineVisualizerProps> = ({\n  imageUrl,\n  spineRegions,\n  bookMatches,\n  selectedSpineId,\n  onSpineSelected,\n  isFinalized,\n  onSpineRegionsUpdated,\n  onManualSpineAdded,\n  onStopEditing,\n  editingBookId\n}) => {\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [hoveredSpineId, setHoveredSpineId] = useState<string | null>(null);\n  const [imageScale, setImageScale] = useState({ scaleX: 1, scaleY: 1, offsetX: 0, offsetY: 0 });\n  const [overlayRect, setOverlayRect] = useState<{ left: number; top: number; width: number; height: number } | null>(null);\n  const [editingState, setEditingState] = useState<EditingState>({\n    mode: 'none',\n    spineId: null,\n    vertexIndex: null,\n    isDragging: false\n  });\n  const [drawingPoints, setDrawingPoints] = useState<[number, number][]>([]);\n  const [localSpineRegions, setLocalSpineRegions] = useState<SpineRegion[]>(spineRegions);\n  \n  const imageRef = useRef<HTMLImageElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const svgRef = useRef<SVGSVGElement>(null);\n\n  // Debug logging for editingBookId\n  console.log('🔍 SpineVisualizer render - editingBookId:', editingBookId);\n  console.log('🔍 SpineVisualizer render - editingState:', editingState);\n  console.log('🔍 SpineVisualizer render - spineRegions count:', spineRegions.length);\n  console.log('🔍 SpineVisualizer render - bookMatches count:', bookMatches.length);\n\n  // Auto-enter editing mode when editingBookId changes\n  useEffect(() => {\n    console.log('🔄 useEffect triggered - editingBookId changed to:', editingBookId);\n    if (editingBookId) {\n      console.log('🔄 Auto-entering editing mode for book:', editingBookId);\n      // Find the spine region for this book\n      const book = bookMatches.find(b => b.id === editingBookId);\n      console.log('🔍 Found book:', book?.title, 'spine_region_id:', book?.spine_region_id);\n      if (book && book.spine_region_id) {\n        const spine = spineRegions.find(s => s.id === book.spine_region_id);\n        console.log('🔍 Found spine:', spine?.id);\n        if (spine) {\n          console.log('✅ Found spine, entering editing mode');\n          setEditingState({\n            mode: 'editing',\n            spineId: spine.id,\n            vertexIndex: null,\n            isDragging: false\n          });\n        } else {\n          console.log('❌ No spine found for book, entering drawing mode');\n          setEditingState({\n            mode: 'drawing',\n            spineId: editingBookId,\n            vertexIndex: null,\n            isDragging: false\n          });\n        }\n      } else {\n        console.log('❌ No book or spine_region_id found, entering drawing mode');\n        setEditingState({\n          mode: 'drawing',\n          spineId: editingBookId,\n          vertexIndex: null,\n          isDragging: false\n        });\n      }\n    } else {\n      console.log('🔄 Exiting editing mode');\n      setEditingState({\n        mode: 'none',\n        spineId: null,\n        vertexIndex: null,\n        isDragging: false\n      });\n    }\n  }, [editingBookId, bookMatches, spineRegions]);\n\n  // Sync local spine regions when prop changes\n  useEffect(() => {\n    setLocalSpineRegions(spineRegions);\n  }, [spineRegions]);\n\n  // Calculate image scale and offset when image loads\n  useEffect(() => {\n    if (imageRef.current && imageLoaded) {\n      const img = imageRef.current;\n      const container = containerRef.current;\n      \n      if (container) {\n        const containerRect = container.getBoundingClientRect();\n        const imgRect = img.getBoundingClientRect();\n        \n        // Calculate scale factors\n        const scaleX = imgRect.width / img.naturalWidth;\n        const scaleY = imgRect.height / img.naturalHeight;\n        \n        // Calculate offset (difference between container and image positioning)\n        const offsetX = imgRect.left - containerRect.left;\n        const offsetY = imgRect.top - containerRect.top;\n        \n        setImageScale({ scaleX, scaleY, offsetX, offsetY });\n        setOverlayRect({ left: offsetX, top: offsetY, width: imgRect.width, height: imgRect.height });\n      }\n    }\n  }, [imageLoaded]);\n\n  // Convert spine polygon to scaled SVG points string\n  const getScaledPoints = (spine: SpineRegion) => {\n    if (!spine.coordinates || spine.coordinates.length === 0) return '';\n    return spine.coordinates\n      .map(([x, y]) => {\n        const sx = x * imageScale.scaleX;\n        const sy = y * imageScale.scaleY;\n        return `${sx},${sy}`;\n      })\n      .join(' ');\n  };\n\n  // Convert SVG coordinates back to image coordinates\n  const getImageCoordinates = (svgX: number, svgY: number): [number, number] => {\n    return [svgX / imageScale.scaleX, svgY / imageScale.scaleY];\n  };\n\n  // Compute centroid for label/tooltip positioning within overlay\n  const getCentroid = (spine: SpineRegion) => {\n    if (!spine.coordinates || spine.coordinates.length === 0) return { x: 0, y: 0 };\n    const pts = spine.coordinates;\n    const cx = pts.reduce((a, p) => a + p[0], 0) / pts.length;\n    const cy = pts.reduce((a, p) => a + p[1], 0) / pts.length;\n    return { x: cx * imageScale.scaleX, y: cy * imageScale.scaleY };\n  };\n\n  // Helper function to get spine region by ID\n  const getSpineRegion = (id: string) => {\n    return spineRegions.find(spine => spine.id === id);\n  };\n\n  // Helper function to get book data for a spine\n  const getBookData = (spineId: string) => {\n    const book = bookMatches.find(book => book.spine_region_id === spineId);\n    console.log('🔍 getBookData for spine:', spineId, 'found book:', book?.id, 'title:', book?.title);\n    return book;\n  };\n\n  // Handle spine region click\n  const handleSpineClick = (spineId: string) => {\n    if (editingState.mode === 'drawing') return; // Don't select while drawing\n    onSpineSelected(spineId);\n  };\n\n  // Handle spine region hover\n  const handleSpineHover = (spineId: string | null) => {\n    if (editingState.mode === 'drawing') return; // Don't hover while drawing\n    setHoveredSpineId(spineId);\n  };\n\n  // Start editing mode for a spine\n  const startEditing = (spineId: string) => {\n    setEditingState({\n      mode: 'editing',\n      spineId,\n      vertexIndex: null,\n      isDragging: false\n    });\n  };\n\n  // Start drawing mode for manual entry\n  const startDrawing = (spineId: string) => {\n    console.log('🎨 Starting drawing mode for spine:', spineId);\n    setEditingState({\n      mode: 'drawing',\n      spineId,\n      vertexIndex: null,\n      isDragging: false\n    });\n    setDrawingPoints([]);\n    \n    // If we're editing an existing book, remove the old spine first\n    if (editingBookId && onSpineRegionsUpdated) {\n      const book = bookMatches.find(b => b.id === editingBookId);\n      if (book && book.spine_region_id) {\n        console.log('🗑️ Removing old spine:', book.spine_region_id);\n        const updatedRegions = localSpineRegions.filter(spine => spine.id !== book.spine_region_id);\n        setLocalSpineRegions(updatedRegions);\n        onSpineRegionsUpdated(updatedRegions);\n      }\n    }\n  };\n\n  // Cancel editing/drawing mode\n  const cancelEditing = () => {\n    setEditingState({\n      mode: 'none',\n      spineId: null,\n      vertexIndex: null,\n      isDragging: false\n    });\n    setDrawingPoints([]);\n  };\n\n  // Save manual drawing\n  const saveManualDrawing = () => {\n    if (drawingPoints.length >= 3 && onManualSpineAdded && editingBookId) {\n      const newSpine: SpineRegion = {\n        id: `manual_${Date.now()}`,\n        x: Math.min(...drawingPoints.map(p => p[0])),\n        y: Math.min(...drawingPoints.map(p => p[1])),\n        width: Math.max(...drawingPoints.map(p => p[0])) - Math.min(...drawingPoints.map(p => p[0])),\n        height: Math.max(...drawingPoints.map(p => p[1])) - Math.min(...drawingPoints.map(p => p[1])),\n        rotation: 0,\n        confidence: 0.9,\n        coordinates: drawingPoints\n      };\n      \n      onManualSpineAdded(newSpine);\n      cancelEditing();\n    }\n  };\n\n  // Handle SVG click for drawing\n  const handleSvgClick = (event: React.MouseEvent<SVGSVGElement>) => {\n    if (editingState.mode !== 'drawing') return;\n    \n    const svg = svgRef.current;\n    if (!svg) return;\n    \n    const rect = svg.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    \n    const imageCoords = getImageCoordinates(x, y);\n    setDrawingPoints(prev => [...prev, imageCoords]);\n  };\n\n  // Handle vertex drag start\n  const handleVertexDragStart = (spineId: string, vertexIndex: number) => {\n    setEditingState(prev => ({\n      ...prev,\n      mode: 'editing',\n      spineId,\n      vertexIndex,\n      isDragging: true\n    }));\n  };\n\n  // Handle vertex drag - use local state for smooth dragging\n  const handleVertexDrag = useCallback((spineId: string, vertexIndex: number, newX: number, newY: number) => {\n    // Don't call onSpineRegionsUpdated during dragging - just update local state\n    // This prevents re-renders and makes dragging smooth\n    const imageCoords = getImageCoordinates(newX, newY);\n    \n    // Update the local spineRegions state for immediate visual feedback\n    setLocalSpineRegions(prev => prev.map(spine => {\n      if (spine.id === spineId && spine.coordinates) {\n        const newCoordinates = [...spine.coordinates];\n        newCoordinates[vertexIndex] = imageCoords;\n        return { ...spine, coordinates: newCoordinates };\n      }\n      return spine;\n    }));\n  }, [imageScale]);\n\n  // Handle mouse move for vertex dragging\n  const handleMouseMove = useCallback((event: React.MouseEvent<SVGSVGElement>) => {\n    if (editingState.mode !== 'editing' || !editingState.isDragging || !editingState.spineId || editingState.vertexIndex === null) return;\n    \n    const svg = svgRef.current;\n    if (!svg) return;\n    \n    const rect = svg.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    \n    handleVertexDrag(editingState.spineId, editingState.vertexIndex, x, y);\n  }, [editingState, handleVertexDrag]);\n\n  // Handle vertex drag end\n  const handleVertexDragEnd = () => {\n    setEditingState(prev => ({\n      ...prev,\n      isDragging: false\n    }));\n    \n    // Sync the local changes back to the parent component\n    if (onSpineRegionsUpdated) {\n      onSpineRegionsUpdated(localSpineRegions);\n    }\n  };\n\n  // Render vertex handles for editing\n  const renderVertexHandles = (spine: SpineRegion) => {\n    if (editingState.mode !== 'editing' || editingState.spineId !== spine.id) return null;\n    \n    return spine.coordinates?.map((coord, index) => {\n      const [x, y] = coord;\n      const svgX = x * imageScale.scaleX;\n      const svgY = y * imageScale.scaleY;\n      \n      return (\n        <circle\n          key={`vertex-${spine.id}-${index}`}\n          cx={svgX}\n          cy={svgY}\n          r={6}\n          fill=\"#FF6B6B\"\n          stroke=\"#FF4757\"\n          strokeWidth={2}\n          cursor=\"move\"\n          onMouseDown={(e) => {\n            e.stopPropagation();\n            handleVertexDragStart(spine.id, index);\n          }}\n          onMouseUp={handleVertexDragEnd}\n          style={{ pointerEvents: editingState.isDragging ? 'none' : 'auto' }}\n        />\n      );\n    });\n  };\n\n  // Render drawing points\n  const renderDrawingPoints = () => {\n    if (editingState.mode !== 'drawing' || drawingPoints.length === 0) return null;\n    \n    return (\n      <g>\n        {/* Draw lines between points */}\n        {drawingPoints.length > 1 && (\n          <polyline\n            points={drawingPoints.map(([x, y]) => `${x * imageScale.scaleX},${y * imageScale.scaleY}`).join(' ')}\n            fill=\"none\"\n            stroke=\"#FF6B6B\"\n            strokeWidth={2}\n            strokeDasharray=\"5,5\"\n          />\n        )}\n        \n        {/* Draw vertex points */}\n        {drawingPoints.map(([x, y], index) => (\n          <circle\n            key={`drawing-${index}`}\n            cx={x * imageScale.scaleX}\n            cy={y * imageScale.scaleY}\n            r={4}\n            fill=\"#FF6B6B\"\n            stroke=\"#FF4757\"\n            strokeWidth={2}\n          />\n        ))}\n      </g>\n    );\n  };\n\n  // Render spine region as polygon within an SVG aligned to the image\n  const renderSpineRegion = (spine: SpineRegion) => {\n    const book = getBookData(spine.id);\n    const points = getScaledPoints(spine);\n    const { x: cx, y: cy } = getCentroid(spine);\n    const isSelected = selectedSpineId === spine.id;\n    const isHovered = hoveredSpineId === spine.id;\n    const isEditing = editingState.mode === 'editing' && editingState.spineId === spine.id;\n    const isDrawing = editingState.mode === 'drawing' && editingState.spineId === spine.id;\n    const hasSelection = selectedSpineId !== null;\n    const isOtherSelected = hasSelection && !isSelected;\n\n    // Debug logging\n    console.log('🔍 Rendering spine:', spine.id, 'editingBookId:', editingBookId, 'book?.spine_region_id:', book?.spine_region_id);\n\n    // Only show spines that are being edited or not in editing mode\n    if (editingBookId && !isEditing && !isDrawing) {\n      // Check if this spine belongs to the book being edited\n      const isTargetBook = book && book.id === editingBookId;\n      if (!isTargetBook) {\n        console.log('🚫 Hiding spine:', spine.id, 'because it\\'s not the editing target book');\n        return null;\n      }\n    }\n\n    const fill = isEditing || isDrawing ? 'rgba(255,107,107,0.3)' : \n                 isSelected ? 'rgba(59,130,246,0.25)' : \n                 isHovered ? 'rgba(59,130,246,0.18)' : \n                 'rgba(59,130,246,0.12)';\n    const stroke = isEditing || isDrawing ? '#FF6B6B' :\n                  isSelected ? '#60A5FA' : \n                  isHovered ? '#3B82F6' : \n                  '#2563EB';\n    const opacity = isOtherSelected && !isEditing && !isDrawing ? 0.35 : 1;\n\n    return (\n      <g key={spine.id} style={{ opacity }}\n         onMouseEnter={() => handleSpineHover(spine.id)}\n         onMouseLeave={() => handleSpineHover(null)}\n         onClick={() => handleSpineClick(spine.id)}\n      >\n        <polygon points={points} fill={fill} stroke={stroke} strokeWidth={2} />\n        \n        {/* Spine number label at centroid */}\n        <text x={cx} y={cy} textAnchor=\"middle\" dominantBaseline=\"middle\" fill=\"#6B7280\" fontSize={12} fontWeight={600}>\n          {spineRegions.findIndex(s => s.id === spine.id) + 1}\n        </text>\n        \n\n        \n        {/* Vertex handles for editing */}\n        {renderVertexHandles(spine)}\n        \n        {/* Tooltip near centroid */}\n        {hoveredSpineId === spine.id && book && overlayRect && !isEditing && (\n          <foreignObject x={Math.min(Math.max(cx + 8, 0), overlayRect.width - 200)} y={Math.max(cy - 40, 0)} width={200} height={80}>\n            <div className=\"bg-gray-900 text-white text-xs px-3 py-2 rounded-lg shadow-lg\" style={{ pointerEvents: 'none' }}>\n              <div className=\"font-medium mb-1 truncate\">{book.title}</div>\n              <div className=\"text-gray-300 truncate\">by {Array.isArray(book.author_name) ? book.author_name.join(', ') : book.author_name || 'Unknown Author'}</div>\n              {book.first_publish_year && (\n                <div className=\"text-gray-400\">{book.first_publish_year}</div>\n              )}\n            </div>\n          </foreignObject>\n        )}\n      </g>\n    );\n  };\n\n  return (\n    <div className=\"card p-0 overflow-hidden\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-500 mb-2\">\n              Book Spine Detection\n            </h3>\n            <p className=\"text-sm text-gray-400\">\n              {spineRegions.length} spine{spineRegions.length !== 1 ? 's' : ''} detected\n              {bookMatches.length > 0 && ` • ${bookMatches.length} book${bookMatches.length !== 1 ? 's' : ''} identified`}\n            </p>\n          </div>\n          \n          {/* Editing Controls */}\n          {!isFinalized && (\n            <div className=\"flex items-center space-x-2\">\n                             {editingState.mode === 'none' && editingBookId && (\n                 <>\n                   <button\n                     onClick={() => startDrawing(editingBookId)}\n                     className=\"btn-secondary text-sm px-3 py-1 flex items-center space-x-1\"\n                   >\n                     <Plus className=\"w-4 h-4\" />\n                     <span>Draw OBB</span>\n                   </button>\n                 </>\n               )}\n              \n              {editingState.mode === 'drawing' && (\n                <>\n                  <button\n                    onClick={saveManualDrawing}\n                    disabled={drawingPoints.length < 3}\n                    className=\"btn-primary text-sm px-3 py-1 flex items-center space-x-1 disabled:opacity-50\"\n                  >\n                    <Save className=\"w-4 h-4\" />\n                    <span>Save OBB</span>\n                  </button>\n                  <button\n                    onClick={cancelEditing}\n                    className=\"btn-danger text-sm px-3 py-1 flex items-center space-x-1\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                    <span>Cancel</span>\n                  </button>\n                </>\n              )}\n              \n                            {editingState.mode === 'editing' && (\n                <>\n                  <button\n                    onClick={() => startDrawing(editingBookId || '')}\n                    className=\"btn-secondary text-sm px-3 py-1 flex items-center space-x-1\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                    <span>Draw New OBB</span>\n                  </button>\n                  <div className=\"text-sm text-gray-400 px-3 py-1 flex items-center space-x-1\">\n                    <Move className=\"w-4 h-4\" />\n                    <span>Drag vertices to edit</span>\n                  </div>\n                  <button\n                    onClick={() => {\n                      cancelEditing();\n                      if (onStopEditing) onStopEditing();\n                    }}\n                    className=\"btn-primary text-sm px-3 py-1 flex items-center space-x-1\"\n                  >\n                    <Save className=\"w-4 h-4\" />\n                    <span>Done</span>\n                  </button>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Image Container */}\n      <div \n        ref={containerRef}\n        className=\"relative bg-gray-100 min-h-[400px] flex items-center justify-center\"\n      >\n        {!imageLoaded && (\n          <div className=\"text-center text-gray-400\">\n            <BookOpen className=\"w-12 h-12 mx-auto mb-2 text-gray-400\" />\n            <p>Loading image...</p>\n          </div>\n        )}\n\n        {/* Main Image */}\n        <img\n          ref={imageRef}\n          src={imageUrl}\n          alt=\"Book spines\"\n          className=\"max-w-full max-h-[600px] object-contain\"\n          onLoad={() => setImageLoaded(true)}\n          onError={() => setImageLoaded(false)}\n        />\n\n        {/* Spine Regions Overlay */}\n        {imageLoaded && overlayRect && (\n          <svg\n            ref={svgRef}\n            className=\"absolute cursor-crosshair\"\n            style={{ left: overlayRect.left, top: overlayRect.top }}\n            width={overlayRect.width}\n            height={overlayRect.height}\n            onClick={handleSvgClick}\n            onMouseMove={handleMouseMove}\n            onMouseUp={handleVertexDragEnd}\n          >\n            {localSpineRegions.map(renderSpineRegion)}\n            {renderDrawingPoints()}\n          </svg>\n        )}\n\n        {/* No Spines Detected */}\n        {imageLoaded && spineRegions.length === 0 && editingState.mode !== 'drawing' && (\n          <div className=\"absolute inset-0 flex items-center justify-center bg-white bg-opacity-90\">\n            <div className=\"text-center text-gray-400\">\n              <AlertCircle className=\"w-12 h-12 mx-auto mb-2 text-gray-400\" />\n              <p className=\"text-lg font-medium\">No book spines detected</p>\n              <p className=\"text-sm\">Try uploading a clearer image or draw spines manually</p>\n            </div>\n          </div>\n        )}\n\n        {/* Drawing Instructions */}\n        {imageLoaded && editingState.mode === 'drawing' && (\n          <div className=\"absolute top-4 left-4 bg-blue-600 text-white px-4 py-2 rounded-lg shadow-lg\">\n            <p className=\"text-sm font-medium\">Click to add vertices. Need at least 3 points.</p>\n            <p className=\"text-xs opacity-90\">Click \"Save OBB\" when done</p>\n          </div>\n        )}\n      </div>\n\n      {/* Legend */}\n      {spineRegions.length > 0 && (\n        <div className=\"p-4 bg-gray-50 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between text-sm text-gray-400\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-primary-500 rounded\"></div>\n                <span>Detected spine</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-primary-600 rounded ring-2 ring-primary-400\"></div>\n                <span>Selected</span>\n              </div>\n              {!isFinalized && (\n                <>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-red-500 rounded\"></div>\n                    <span>Editing</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-red-400 rounded\"></div>\n                    <span>Drawing</span>\n                  </div>\n                </>\n              )}\n            </div>\n            \n            <div className=\"text-xs\">\n              {editingState.mode === 'none' && 'Click on spine regions to select books'}\n              {editingState.mode === 'drawing' && 'Click on image to draw spine outline'}\n              {editingState.mode === 'editing' && 'Drag red vertices to edit spine shape'}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SpineVisualizer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}