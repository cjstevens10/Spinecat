{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nclass ApiService {\n  constructor(baseUrl = API_BASE_URL) {\n    this.baseUrl = void 0;\n    this.baseUrl = baseUrl;\n  }\n\n  /**\r\n   * Check if the backend is healthy and ready\r\n   */\n  async checkHealth() {\n    try {\n      const response = await fetch(`${this.baseUrl}/health`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Health check failed:', error);\n      throw new Error('Backend is not available');\n    }\n  }\n\n  /**\r\n   * Process an uploaded image through the Spinecat pipeline\r\n   */\n  async processImage(file) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await fetch(`${this.baseUrl}/api/process-image`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n\n      // Convert the API response to our frontend types\n      return {\n        image_url: URL.createObjectURL(file),\n        // Create local URL for display\n        total_spines: result.total_spines,\n        successful_matches: result.successful_matches,\n        perfect_matches: result.successful_matches,\n        // Add missing property\n        spine_regions: result.spine_regions.map(spine => ({\n          id: spine.id,\n          bbox: spine.bbox,\n          confidence: spine.confidence,\n          ocr_text: spine.ocr_text,\n          denoised_text: spine.denoised_text\n        })),\n        book_matches: result.book_matches.map(match => ({\n          spine_id: match.spine_id,\n          title: match.title,\n          author: match.author,\n          year: match.year,\n          confidence: match.confidence,\n          open_library_id: match.open_library_id\n        })),\n        ocr_failures: result.ocr_failures.map(failure => ({\n          spine_id: failure.spine_id,\n          bbox: failure.bbox,\n          confidence: failure.confidence\n        })),\n        processing_time: result.processing_time\n      };\n    } catch (error) {\n      console.error('Image processing failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Search for books using the Open Library API\r\n   */\n  async searchBooks(query, limit = 5) {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/search-books?query=${encodeURIComponent(query)}&limit=${limit}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      return result.results || [];\n    } catch (error) {\n      console.error('Book search failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get the current API status\r\n   */\n  getApiStatus() {\n    return {\n      baseUrl: this.baseUrl,\n      isAvailable: false // Will be updated by health check\n    };\n  }\n}\n\n// Create and export a singleton instance\nexport const apiService = new ApiService();\n\n// Export the class for testing\nexport { ApiService };","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseUrl","checkHealth","response","fetch","ok","Error","status","json","error","console","processImage","file","formData","FormData","append","method","body","errorData","detail","result","image_url","URL","createObjectURL","total_spines","successful_matches","perfect_matches","spine_regions","map","spine","id","bbox","confidence","ocr_text","denoised_text","book_matches","match","spine_id","title","author","year","open_library_id","ocr_failures","failure","processing_time","searchBooks","query","limit","encodeURIComponent","results","getApiStatus","isAvailable","apiService"],"sources":["C:/Users/coope/CursorWorkspace/Spinecat/web_interface/src/services/api.ts"],"sourcesContent":["import { ProcessingResult, OpenLibrarySearchResult } from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nclass ApiService {\r\n  private baseUrl: string;\r\n\r\n  constructor(baseUrl: string = API_BASE_URL) {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  /**\r\n   * Check if the backend is healthy and ready\r\n   */\r\n  async checkHealth(): Promise<{ status: string; pipeline: string }> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/health`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Health check failed:', error);\r\n      throw new Error('Backend is not available');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process an uploaded image through the Spinecat pipeline\r\n   */\r\n  async processImage(file: File): Promise<ProcessingResult> {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n\r\n      const response = await fetch(`${this.baseUrl}/api/process-image`, {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n              // Convert the API response to our frontend types\r\n        return {\r\n          image_url: URL.createObjectURL(file), // Create local URL for display\r\n          total_spines: result.total_spines,\r\n          successful_matches: result.successful_matches,\r\n          perfect_matches: result.successful_matches, // Add missing property\r\n          spine_regions: result.spine_regions.map((spine: any) => ({\r\n            id: spine.id,\r\n            bbox: spine.bbox,\r\n            confidence: spine.confidence,\r\n            ocr_text: spine.ocr_text,\r\n            denoised_text: spine.denoised_text,\r\n          })),\r\n          book_matches: result.book_matches.map((match: any) => ({\r\n            spine_id: match.spine_id,\r\n            title: match.title,\r\n            author: match.author,\r\n            year: match.year,\r\n            confidence: match.confidence,\r\n            open_library_id: match.open_library_id,\r\n          })),\r\n          ocr_failures: result.ocr_failures.map((failure: any) => ({\r\n            spine_id: failure.spine_id,\r\n            bbox: failure.bbox,\r\n            confidence: failure.confidence,\r\n          })),\r\n          processing_time: result.processing_time,\r\n        };\r\n    } catch (error) {\r\n      console.error('Image processing failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search for books using the Open Library API\r\n   */\r\n  async searchBooks(query: string, limit: number = 5): Promise<OpenLibrarySearchResult[]> {\r\n    try {\r\n      const response = await fetch(\r\n        `${this.baseUrl}/api/search-books?query=${encodeURIComponent(query)}&limit=${limit}`\r\n      );\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result.results || [];\r\n    } catch (error) {\r\n      console.error('Book search failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the current API status\r\n   */\r\n  getApiStatus(): { baseUrl: string; isAvailable: boolean } {\r\n    return {\r\n      baseUrl: this.baseUrl,\r\n      isAvailable: false, // Will be updated by health check\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nexport const apiService = new ApiService();\r\n\r\n// Export the class for testing\r\nexport { ApiService };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}