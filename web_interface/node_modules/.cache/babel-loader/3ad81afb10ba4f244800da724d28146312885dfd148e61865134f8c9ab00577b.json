{"ast":null,"code":"export class ApiService{constructor(){this.baseUrl=void 0;this.baseUrl='http://127.0.0.1:8002';}// Public getter for base URL\ngetBaseUrl(){return this.baseUrl;}/**\n   * Test API connection\n   */async testConnection(){try{console.log('üß™ API: Testing connection...');const response=await fetch(\"\".concat(this.baseUrl,\"/api/test\"),{method:'POST',body:new FormData()});console.log('üß™ API: Test response:',response.status,response.statusText);if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();console.log('üß™ API: Test result:',result);return result;}catch(error){console.error('‚ùå API: Connection test failed:',error);throw error;}}/**\n   * Start image processing - returns task_id\n   */async startProcess(file){try{console.log('üöÄ API: Starting processImage...');console.log('üöÄ API: baseUrl:',this.baseUrl);console.log('üöÄ API: file:',file.name,file.size,file.type);const formData=new FormData();formData.append('file',file);console.log('üöÄ API: Making fetch request to:',\"\".concat(this.baseUrl,\"/api/process-image\"));const response=await fetch(\"\".concat(this.baseUrl,\"/api/process-image\"),{method:'POST',body:formData});if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const result=await response.json();console.log('‚úÖ API: Process started successfully:',result);return result;}catch(error){console.error('‚ùå API: Failed to start process:',error);throw error;}}/**\n   * Get progress for a specific task\n   */async getProgress(taskId){try{const response=await fetch(\"\".concat(this.baseUrl,\"/api/progress/\").concat(taskId));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}return await response.json();}catch(error){console.error('Failed to get progress:',error);throw error;}}/**\n   * Get result for a completed task\n   */async getResult(taskId){try{const response=await fetch(\"\".concat(this.baseUrl,\"/api/result/\").concat(taskId));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();if(data.status!=='completed'){throw new Error(\"Task not completed: \".concat(data.status));}return data;}catch(error){console.error('Failed to get result:',error);throw error;}}/**\n   * Search for books\n   */async searchBooks(query){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;try{const response=await fetch(\"\".concat(this.baseUrl,\"/api/search-books?query=\").concat(encodeURIComponent(query),\"&limit=\").concat(limit));if(!response.ok){throw new Error(\"HTTP error! status: \".concat(response.status));}const data=await response.json();// Handle the structured response from backend\nif(data.success&&Array.isArray(data.results)){return data.results;}else if(Array.isArray(data)){// Fallback: if backend returns array directly\nreturn data;}else{console.warn('Unexpected search response format:',data);return[];}}catch(error){console.error('Failed to search books:',error);return[];}}}export const apiService=new ApiService();","map":{"version":3,"names":["ApiService","constructor","baseUrl","getBaseUrl","testConnection","console","log","response","fetch","concat","method","body","FormData","status","statusText","ok","Error","result","json","error","startProcess","file","name","size","type","formData","append","getProgress","taskId","getResult","data","searchBooks","query","limit","arguments","length","undefined","encodeURIComponent","success","Array","isArray","results","warn","apiService"],"sources":["/Users/cooperstevens/Documents/CursorWorkspace copy/Spinecat/web_interface/src/services/api.ts"],"sourcesContent":["import { ProcessingResult, OpenLibraryBook } from '../types';\n\nexport class ApiService {\n  private baseUrl: string;\n\n  constructor() {\n    this.baseUrl = 'http://127.0.0.1:8002';\n  }\n\n  // Public getter for base URL\n  public getBaseUrl(): string {\n    return this.baseUrl;\n  }\n\n  /**\n   * Test API connection\n   */\n  async testConnection(): Promise<{ status: string; filename: string; size: number }> {\n    try {\n      console.log('üß™ API: Testing connection...');\n      const response = await fetch(`${this.baseUrl}/api/test`, {\n        method: 'POST',\n        body: new FormData()\n      });\n      \n      console.log('üß™ API: Test response:', response.status, response.statusText);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      console.log('üß™ API: Test result:', result);\n      return result;\n    } catch (error) {\n      console.error('‚ùå API: Connection test failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Start image processing - returns task_id\n   */\n  async startProcess(file: File): Promise<{ task_id: string }> {\n    try {\n      console.log('üöÄ API: Starting processImage...');\n      console.log('üöÄ API: baseUrl:', this.baseUrl);\n      console.log('üöÄ API: file:', file.name, file.size, file.type);\n      \n      const formData = new FormData();\n      formData.append('file', file);\n      \n      console.log('üöÄ API: Making fetch request to:', `${this.baseUrl}/api/process-image`);\n      \n      const response = await fetch(`${this.baseUrl}/api/process-image`, {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      console.log('‚úÖ API: Process started successfully:', result);\n      return result;\n    } catch (error) {\n      console.error('‚ùå API: Failed to start process:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get progress for a specific task\n   */\n  async getProgress(taskId: string): Promise<{ status: string; progress: number; message: string }> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/progress/${taskId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to get progress:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get result for a completed task\n   */\n  async getResult(taskId: string): Promise<ProcessingResult> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/result/${taskId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.status !== 'completed') {\n        throw new Error(`Task not completed: ${data.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error('Failed to get result:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Search for books\n   */\n  async searchBooks(query: string, limit: number = 5): Promise<OpenLibraryBook[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/search-books?query=${encodeURIComponent(query)}&limit=${limit}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      \n      // Handle the structured response from backend\n      if (data.success && Array.isArray(data.results)) {\n        return data.results;\n      } else if (Array.isArray(data)) {\n        // Fallback: if backend returns array directly\n        return data;\n      } else {\n        console.warn('Unexpected search response format:', data);\n        return [];\n      }\n    } catch (error) {\n      console.error('Failed to search books:', error);\n      return [];\n    }\n  }\n}\n\nexport const apiService = new ApiService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}